{
  "hash": "b1736aec66397834c912fc81bf284a69",
  "result": {
    "markdown": "---\ntitle: 'Exercise1: Your First Map'\nauthor: Sieun Shim\ndate: '2023-04-28'\ncategories:\n  - code\n  - geopandas\ntoc: true\n---\n\n> Kaggle Geospatial Analysis exercise1\n\n**This notebook is an exercise in the [Geospatial Analysis](https://www.kaggle.com/learn/geospatial-analysis) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/your-first-map).**\n\n---\n\n\n# Introduction\n\n[Kiva.org](https://www.kiva.org/) is an online crowdfunding platform extending financial services to poor people around the world. Kiva lenders have provided over $1 billion dollars in loans to over 2 million people.\n\n<center>\n<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/2G8C53X.png\" width=\"500\"><br/>\n</center>\n\nKiva reaches some of the most remote places in the world through their global network of \"Field Partners\". These partners are local organizations working in communities to vet borrowers, provide services, and administer loans.\n\nIn this exercise, you'll investigate Kiva loans in the Philippines.  Can you identify regions that might be outside of Kiva's current network, in order to identify opportunities for recruiting new Field Partners?\n\nTo get started, run the code cell below to set up our feedback system.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd\n```\n:::\n\n\n### 1) Get the data.\n\nUse the next cell to load the shapefile located at `loans_filepath` to create a GeoDataFrame `world_loans`.  \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nloans_filepath = \"../../../spatial_analysis/data/kiva_loans/kiva_loans/kiva_loans.shp\"\n\n# Your code here: Load the data\nworld_loans = gpd.read_file(loans_filepath)\n\n# Uncomment to view the first five rows of the data\nworld_loans.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Partner ID</th>\n      <th>Field Part</th>\n      <th>sector</th>\n      <th>Loan Theme</th>\n      <th>country</th>\n      <th>amount</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9</td>\n      <td>KREDIT Microfinance Institution</td>\n      <td>General Financial Inclusion</td>\n      <td>Higher Education</td>\n      <td>Cambodia</td>\n      <td>450</td>\n      <td>POINT (102.89751 13.66726)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9</td>\n      <td>KREDIT Microfinance Institution</td>\n      <td>General Financial Inclusion</td>\n      <td>Vulnerable Populations</td>\n      <td>Cambodia</td>\n      <td>20275</td>\n      <td>POINT (102.98962 13.02870)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9</td>\n      <td>KREDIT Microfinance Institution</td>\n      <td>General Financial Inclusion</td>\n      <td>Higher Education</td>\n      <td>Cambodia</td>\n      <td>9150</td>\n      <td>POINT (102.98962 13.02870)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>KREDIT Microfinance Institution</td>\n      <td>General Financial Inclusion</td>\n      <td>Vulnerable Populations</td>\n      <td>Cambodia</td>\n      <td>604950</td>\n      <td>POINT (105.31312 12.09829)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9</td>\n      <td>KREDIT Microfinance Institution</td>\n      <td>General Financial Inclusion</td>\n      <td>Sanitation</td>\n      <td>Cambodia</td>\n      <td>275</td>\n      <td>POINT (105.31312 12.09829)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 2) Plot the data.\n\nRun the next code cell without changes to load a GeoDataFrame `world` containing country boundaries.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# This dataset is provided in GeoPandas\nworld_filepath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_filepath)\nworld.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pop_est</th>\n      <th>continent</th>\n      <th>name</th>\n      <th>iso_a3</th>\n      <th>gdp_md_est</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>889953.0</td>\n      <td>Oceania</td>\n      <td>Fiji</td>\n      <td>FJI</td>\n      <td>5496</td>\n      <td>MULTIPOLYGON (((180.00000 -16.06713, 180.00000...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58005463.0</td>\n      <td>Africa</td>\n      <td>Tanzania</td>\n      <td>TZA</td>\n      <td>63177</td>\n      <td>POLYGON ((33.90371 -0.95000, 34.07262 -1.05982...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>603253.0</td>\n      <td>Africa</td>\n      <td>W. Sahara</td>\n      <td>ESH</td>\n      <td>907</td>\n      <td>POLYGON ((-8.66559 27.65643, -8.66512 27.58948...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>37589262.0</td>\n      <td>North America</td>\n      <td>Canada</td>\n      <td>CAN</td>\n      <td>1736425</td>\n      <td>MULTIPOLYGON (((-122.84000 49.00000, -122.9742...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>328239523.0</td>\n      <td>North America</td>\n      <td>United States of America</td>\n      <td>USA</td>\n      <td>21433226</td>\n      <td>MULTIPOLYGON (((-122.84000 49.00000, -120.0000...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nUse the `world` and `world_loans` GeoDataFrames to visualize Kiva loan locations across the world.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Your code here\nax = world.plot(figsize = (10, 10), color = 'whitesmoke', linestyle = ':', edgecolor = 'black')\nworld_loans.plot(markersize = 2, ax = ax)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](exercise1-your-first-map_files/figure-html/cell-5-output-2.png){width=801 height=400}\n:::\n:::\n\n\n### 3) Select loans based in the Philippines.\n\nNext, you'll focus on loans that are based in the Philippines.  Use the next code cell to create a GeoDataFrame `PHL_loans` which contains all rows from `world_loans` with loans that are based in the Philippines.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Your code here\nPHL_loans = world_loans.loc[world_loans['country'] == 'Philippines'].copy()\nPHL_loans.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Partner ID</th>\n      <th>Field Part</th>\n      <th>sector</th>\n      <th>Loan Theme</th>\n      <th>country</th>\n      <th>amount</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2859</th>\n      <td>123</td>\n      <td>Alalay sa Kaunlaran (ASKI)</td>\n      <td>General Financial Inclusion</td>\n      <td>General</td>\n      <td>Philippines</td>\n      <td>400</td>\n      <td>POINT (121.73961 17.64228)</td>\n    </tr>\n    <tr>\n      <th>2860</th>\n      <td>123</td>\n      <td>Alalay sa Kaunlaran (ASKI)</td>\n      <td>General Financial Inclusion</td>\n      <td>General</td>\n      <td>Philippines</td>\n      <td>400</td>\n      <td>POINT (121.74169 17.63235)</td>\n    </tr>\n    <tr>\n      <th>2861</th>\n      <td>123</td>\n      <td>Alalay sa Kaunlaran (ASKI)</td>\n      <td>General Financial Inclusion</td>\n      <td>General</td>\n      <td>Philippines</td>\n      <td>400</td>\n      <td>POINT (121.46667 16.60000)</td>\n    </tr>\n    <tr>\n      <th>2862</th>\n      <td>123</td>\n      <td>Alalay sa Kaunlaran (ASKI)</td>\n      <td>General Financial Inclusion</td>\n      <td>General</td>\n      <td>Philippines</td>\n      <td>6050</td>\n      <td>POINT (121.73333 17.83333)</td>\n    </tr>\n    <tr>\n      <th>2863</th>\n      <td>123</td>\n      <td>Alalay sa Kaunlaran (ASKI)</td>\n      <td>General Financial Inclusion</td>\n      <td>General</td>\n      <td>Philippines</td>\n      <td>625</td>\n      <td>POINT (121.51800 16.72368)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 4) Understand loans in the Philippines.\n\nRun the next code cell without changes to load a GeoDataFrame `PHL` containing boundaries for all islands in the Philippines.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Load a KML file containing island boundaries\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\nPHL = gpd.read_file(\"../../../spatial_analysis/data/Philippines_AL258.kml\", driver='KML')\nPHL.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Description</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Autonomous Region in Muslim Mindanao</td>\n      <td></td>\n      <td>MULTIPOLYGON (((119.46690 4.58718, 119.46653 4...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bicol Region</td>\n      <td></td>\n      <td>MULTIPOLYGON (((124.04577 11.57862, 124.04594 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Cagayan Valley</td>\n      <td></td>\n      <td>MULTIPOLYGON (((122.51581 17.04436, 122.51568 ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Calabarzon</td>\n      <td></td>\n      <td>MULTIPOLYGON (((120.49202 14.05403, 120.49201 ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Caraga</td>\n      <td></td>\n      <td>MULTIPOLYGON (((126.45401 8.24400, 126.45407 8...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nUse the `PHL` and `PHL_loans` GeoDataFrames to visualize loans in the Philippines.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Your code here\nax = PHL.plot(figsize = (10, 10), color = 'whitesmoke', linestyle = ':', edgecolor = 'black')\nPHL_loans.plot(markersize = 2, ax = ax)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](exercise1-your-first-map_files/figure-html/cell-8-output-2.png){width=491 height=781}\n:::\n:::\n\n\nCan you identify any islands where it might be useful to recruit new Field Partners?  Do any islands currently look outside of Kiva's reach?\n\nYou might find [this map](https://bit.ly/2U2G7x7) useful to answer the question.\n\n<img src=\"https://bit.ly/2U2G7x7\" width=500>\n\n# Keep going\n\nContinue to learn about **[coordinate reference systems](https://www.kaggle.com/alexisbcook/coordinate-reference-systems)**.\n\n---\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/geospatial-analysis/discussion) to chat with other learners.*\n\n",
    "supporting": [
      "exercise1-your-first-map_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}