{
  "hash": "281d325b8963346bfd329ce099ef3e68",
  "result": {
    "markdown": "---\ntitle: 'Exercise1: Your First Map'\nauthor: Sieun Shim\ndate: '2023-04-27'\ncategories:\n  - code\n  - geopandas\nimage: exercise1.jpg\n---\n\n> Kaggle Geospatial Analysis Exercise1\n\n\nIn this micro-course, you'll learn about different methods to wrangle and visualize **geospatial data**, or data with a geographic location.\n\n<center>\n<img src=\"https://storage.googleapis.com/kaggle-media/learn/images/v6ZUGgI.png\"><br/>\n</center>\n\nAlong the way, you'll offer solutions to several real-world problems like:\n- Where should a global non-profit expand its reach in remote areas of the Philippines?\n- How do purple martins, a threatened bird species, travel between North and South America?  Are the birds travelling to conservation areas?\n- Which areas of Japan could potentially benefit from extra earthquake reinforcement?\n- Which Starbucks stores in California are strong candidates for the next [Starbucks Reserve Roastery](https://www.forbes.com/sites/garystern/2019/01/22/starbucks-reserve-roastery-its-spacious-and-trendy-but-why-is-starbucks-slowing-down-expansion/#6cb80d4a1bc6) location?\n- Does New York City have sufficient hospitals to respond to motor vehicle collisions?  Which areas of the city have gaps in coverage?\n\nYou'll also visualize crime in the city of Boston, examine health facilities in Ghana, explore top universities in Europe, and track releases of toxic chemicals in the United States.\n\nIn this first tutorial, we'll quickly cover the pre-requisites that you'll need to complete this micro-course.  And, if you'd like to review more deeply, we recommend the **[Pandas micro-course](https://www.kaggle.com/learn/pandas)**.  \n\nWe'll also get started with visualizing our first geospatial dataset!\n\n# Reading data\n\nThe first step is to read in some geospatial data!  To do this, we'll use the [GeoPandas](http://geopandas.org/) library.\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:48.829994Z\",\"iopub.status.busy\":\"2023-04-20T20:47:48.829516Z\",\"iopub.status.idle\":\"2023-04-20T20:47:49.413053Z\",\"shell.execute_reply\":\"2023-04-20T20:47:49.411484Z\"}' papermill='{\"duration\":0.591461,\"end_time\":\"2023-04-20T20:47:49.415595\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:48.824134\",\"status\":\"completed\"}' tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport geopandas as gpd\n```\n:::\n\n\nThere are many, many different geospatial file formats, such as [shapefile](https://en.wikipedia.org/wiki/Shapefile), [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON), [KML](https://en.wikipedia.org/wiki/Keyhole_Markup_Language), and [GPKG](https://en.wikipedia.org/wiki/GeoPackage).  We won't discuss their differences in this micro-course, but it's important to mention that:\n- shapefile is the most common file type that you'll encounter, and \n- all of these file types can be quickly loaded with the `gpd.read_file()` function.\n\nThe next code cell loads a shapefile containing information about forests, wilderness areas, and other lands under the care of the [Department of Environmental Conservation](https://www.dec.ny.gov/index.html) in the state of New York.  \n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:49.437447Z\",\"iopub.status.busy\":\"2023-04-20T20:47:49.437015Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.279297Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.278516Z\"}' papermill='{\"duration\":0.850647,\"end_time\":\"2023-04-20T20:47:50.281133\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:49.430486\",\"status\":\"completed\"}' tags='[]' execution_count=2}\n``` {.python .cell-code}\n# Read in the data\nfull_data = gpd.read_file(\"../../../spatial_analysis/data/DEC_lands/DEC_lands/DEC_lands.shp\")\n\n# View the first five rows of the data\nfull_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID</th>\n      <th>CATEGORY</th>\n      <th>UNIT</th>\n      <th>FACILITY</th>\n      <th>CLASS</th>\n      <th>UMP</th>\n      <th>DESCRIPTIO</th>\n      <th>REGION</th>\n      <th>COUNTY</th>\n      <th>URL</th>\n      <th>SOURCE</th>\n      <th>UPDATE_</th>\n      <th>OFFICE</th>\n      <th>ACRES</th>\n      <th>LANDS_UID</th>\n      <th>GREENCERT</th>\n      <th>SHAPE_AREA</th>\n      <th>SHAPE_LEN</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>FOR PRES DET PAR</td>\n      <td>CFP</td>\n      <td>HANCOCK FP DETACHED PARCEL</td>\n      <td>WILD FOREST</td>\n      <td>NaN</td>\n      <td>DELAWARE COUNTY DETACHED PARCEL</td>\n      <td>4</td>\n      <td>DELAWARE</td>\n      <td>http://www.dec.ny.gov/</td>\n      <td>DELAWARE RPP</td>\n      <td>5/12</td>\n      <td>STAMFORD</td>\n      <td>738.620192</td>\n      <td>103</td>\n      <td>N</td>\n      <td>2.990365e+06</td>\n      <td>7927.662385</td>\n      <td>POLYGON ((486093.245 4635308.586, 486787.235 4...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>FOR PRES DET PAR</td>\n      <td>CFP</td>\n      <td>HANCOCK FP DETACHED PARCEL</td>\n      <td>WILD FOREST</td>\n      <td>NaN</td>\n      <td>DELAWARE COUNTY DETACHED PARCEL</td>\n      <td>4</td>\n      <td>DELAWARE</td>\n      <td>http://www.dec.ny.gov/</td>\n      <td>DELAWARE RPP</td>\n      <td>5/12</td>\n      <td>STAMFORD</td>\n      <td>282.553140</td>\n      <td>1218</td>\n      <td>N</td>\n      <td>1.143940e+06</td>\n      <td>4776.375600</td>\n      <td>POLYGON ((491931.514 4637416.256, 491305.424 4...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>FOR PRES DET PAR</td>\n      <td>CFP</td>\n      <td>HANCOCK FP DETACHED PARCEL</td>\n      <td>WILD FOREST</td>\n      <td>NaN</td>\n      <td>DELAWARE COUNTY DETACHED PARCEL</td>\n      <td>4</td>\n      <td>DELAWARE</td>\n      <td>http://www.dec.ny.gov/</td>\n      <td>DELAWARE RPP</td>\n      <td>5/12</td>\n      <td>STAMFORD</td>\n      <td>234.291262</td>\n      <td>1780</td>\n      <td>N</td>\n      <td>9.485476e+05</td>\n      <td>5783.070364</td>\n      <td>POLYGON ((486000.287 4635834.453, 485007.550 4...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>FOR PRES DET PAR</td>\n      <td>CFP</td>\n      <td>GREENE COUNTY FP DETACHED PARCEL</td>\n      <td>WILD FOREST</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4</td>\n      <td>GREENE</td>\n      <td>http://www.dec.ny.gov/</td>\n      <td>GREENE RPP</td>\n      <td>5/12</td>\n      <td>STAMFORD</td>\n      <td>450.106464</td>\n      <td>2060</td>\n      <td>N</td>\n      <td>1.822293e+06</td>\n      <td>7021.644833</td>\n      <td>POLYGON ((541716.775 4675243.268, 541217.579 4...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>FOREST PRESERVE</td>\n      <td>AFP</td>\n      <td>SARANAC LAKES WILD FOREST</td>\n      <td>WILD FOREST</td>\n      <td>SARANAC LAKES</td>\n      <td>NaN</td>\n      <td>5</td>\n      <td>ESSEX</td>\n      <td>http://www.dec.ny.gov/lands/22593.html</td>\n      <td>DECRP, ESSEX RPP</td>\n      <td>12/96</td>\n      <td>RAY BROOK</td>\n      <td>69.702387</td>\n      <td>1517</td>\n      <td>N</td>\n      <td>2.821959e+05</td>\n      <td>2663.909932</td>\n      <td>POLYGON ((583896.043 4909643.187, 583891.200 4...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs you can see in the \"CLASS\" column, each of the first five rows corresponds to a different forest.  \n\nFor the rest of this tutorial, consider a scenario where you'd like to use this data to plan a weekend camping trip.  Instead of relying on crowd-sourced reviews online, you decide to create your own map.  This way, you can tailor the trip to your specific interests. \n\n# Prerequisites\n\nTo view the first five rows of the data, we used the `head()` method.  You may recall that this is also what we use to preview a Pandas DataFrame.  In fact, every command that you can use with a DataFrame will work with the data!  \n\nThis is because the data was loaded into a (GeoPandas) **GeoDataFrame** object that has all of the capabilities of a (Pandas) DataFrame.\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:50.302645Z\",\"iopub.status.busy\":\"2023-04-20T20:47:50.300836Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.309601Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.308136Z\"}' papermill='{\"duration\":0.018021,\"end_time\":\"2023-04-20T20:47:50.312661\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.294640\",\"status\":\"completed\"}' tags='[]' execution_count=3}\n``` {.python .cell-code}\ntype(full_data)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ngeopandas.geodataframe.GeoDataFrame\n```\n:::\n:::\n\n\nFor instance, if we don't plan to use all of the columns, we can select a subset of them.  (_To review other methods for selecting data, check out [this tutorial](https://www.kaggle.com/residentmario/indexing-selecting-assigning/) from the Pandas micro-course_.)\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:50.334184Z\",\"iopub.status.busy\":\"2023-04-20T20:47:50.332979Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.343660Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.342612Z\"}' papermill='{\"duration\":0.019022,\"end_time\":\"2023-04-20T20:47:50.345839\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.326817\",\"status\":\"completed\"}' tags='[]' execution_count=4}\n``` {.python .cell-code}\ndata = full_data.loc[:, [\"CLASS\", \"COUNTY\", \"geometry\"]].copy()\n```\n:::\n\n\nWe use the `value_counts()` method to see a list of different land types, along with how many times they appear in the dataset. (_To review this (and related methods), check out [this tutorial](https://www.kaggle.com/residentmario/summary-functions-and-maps) from the Pandas micro-course._)\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:50.365746Z\",\"iopub.status.busy\":\"2023-04-20T20:47:50.364730Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.378330Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.376800Z\"}' papermill='{\"duration\":0.021621,\"end_time\":\"2023-04-20T20:47:50.380672\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.359051\",\"status\":\"completed\"}' tags='[]' execution_count=5}\n``` {.python .cell-code}\n# How many lands of each type are there?\ndata.CLASS.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nWILD FOREST                   965\nINTENSIVE USE                 108\nPRIMITIVE                      60\nWILDERNESS                     52\nADMINISTRATIVE                 17\nUNCLASSIFIED                    7\nHISTORIC                        5\nPRIMITIVE BICYCLE CORRIDOR      4\nCANOE AREA                      1\nName: CLASS, dtype: int64\n```\n:::\n:::\n\n\nYou can also use `loc` (and `iloc`) and `isin` to select subsets of the data.  (_To review this, check out [this tutorial](https://www.kaggle.com/residentmario/indexing-selecting-assigning/) from the Pandas micro-course._)\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:50.402116Z\",\"iopub.status.busy\":\"2023-04-20T20:47:50.401767Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.423714Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.422696Z\"}' papermill='{\"duration\":0.030332,\"end_time\":\"2023-04-20T20:47:50.425643\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.395311\",\"status\":\"completed\"}' tags='[]' execution_count=6}\n``` {.python .cell-code}\n# Select lands that fall under the \"WILD FOREST\" or \"WILDERNESS\" category\nwild_lands = data.loc[data.CLASS.isin(['WILD FOREST', 'WILDERNESS'])].copy()\nwild_lands.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CLASS</th>\n      <th>COUNTY</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>WILD FOREST</td>\n      <td>DELAWARE</td>\n      <td>POLYGON ((486093.245 4635308.586, 486787.235 4...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>WILD FOREST</td>\n      <td>DELAWARE</td>\n      <td>POLYGON ((491931.514 4637416.256, 491305.424 4...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>WILD FOREST</td>\n      <td>DELAWARE</td>\n      <td>POLYGON ((486000.287 4635834.453, 485007.550 4...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>WILD FOREST</td>\n      <td>GREENE</td>\n      <td>POLYGON ((541716.775 4675243.268, 541217.579 4...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>WILD FOREST</td>\n      <td>ESSEX</td>\n      <td>POLYGON ((583896.043 4909643.187, 583891.200 4...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf you're not familiar with the commands above, you are encouraged to bookmark this page for reference, so you can look up the commands as needed.  (_Alternatively, you can take the [Pandas micro-course](https://www.kaggle.com/learn/pandas)._)  We'll use these commands throughout this micro-course to understand and filter data before creating maps.\n\n# Create your first map!\n\nWe can quickly visualize the data with the `plot()` method.\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:50.447891Z\",\"iopub.status.busy\":\"2023-04-20T20:47:50.447224Z\",\"iopub.status.idle\":\"2023-04-20T20:47:50.974023Z\",\"shell.execute_reply\":\"2023-04-20T20:47:50.972937Z\"}' papermill='{\"duration\":0.535571,\"end_time\":\"2023-04-20T20:47:50.976283\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.440712\",\"status\":\"completed\"}' tags='[]' execution_count=7}\n``` {.python .cell-code}\nwild_lands.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](1_your-first-map_files/figure-html/cell-8-output-2.png){width=217 height=425}\n:::\n:::\n\n\nEvery GeoDataFrame contains a special \"geometry\" column.  It contains all of the geometric objects that are displayed when we call the `plot()` method.\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:51.002743Z\",\"iopub.status.busy\":\"2023-04-20T20:47:51.002347Z\",\"iopub.status.idle\":\"2023-04-20T20:47:51.010733Z\",\"shell.execute_reply\":\"2023-04-20T20:47:51.009684Z\"}' papermill='{\"duration\":0.018073,\"end_time\":\"2023-04-20T20:47:51.012888\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:50.994815\",\"status\":\"completed\"}' tags='[]' execution_count=8}\n``` {.python .cell-code}\n# View the first five entries in the \"geometry\" column\nwild_lands.geometry.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0    POLYGON ((486093.245 4635308.586, 486787.235 4...\n1    POLYGON ((491931.514 4637416.256, 491305.424 4...\n2    POLYGON ((486000.287 4635834.453, 485007.550 4...\n3    POLYGON ((541716.775 4675243.268, 541217.579 4...\n4    POLYGON ((583896.043 4909643.187, 583891.200 4...\nName: geometry, dtype: geometry\n```\n:::\n:::\n\n\nWhile this column can contain a variety of different datatypes, each entry will typically be a **Point**, **LineString**, or **Polygon**.\n\n![](https://storage.googleapis.com/kaggle-media/learn/images/N1llefr.png)\n\nThe \"geometry\" column in our dataset contains 2983 different Polygon objects, each corresponding to a different shape in the plot above.\n\nIn the code cell below, we create three more GeoDataFrames, containing campsite locations (**Point**), foot trails (**LineString**), and county boundaries (**Polygon**).\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:51.038732Z\",\"iopub.status.busy\":\"2023-04-20T20:47:51.038133Z\",\"iopub.status.idle\":\"2023-04-20T20:47:52.809911Z\",\"shell.execute_reply\":\"2023-04-20T20:47:52.808621Z\"}' papermill='{\"duration\":1.781993,\"end_time\":\"2023-04-20T20:47:52.812448\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:51.030455\",\"status\":\"completed\"}' tags='[]' execution_count=9}\n``` {.python .cell-code}\n# Campsites in New York state (Point)\nPOI_data = gpd.read_file(\"../../../spatial_analysis/data/DEC_pointsinterest/DEC_pointsinterest/Decptsofinterest.shp\")\ncampsites = POI_data.loc[POI_data.ASSET=='PRIMITIVE CAMPSITE'].copy()\n\n# Foot trails in New York state (LineString)\nroads_trails = gpd.read_file(\"../../../spatial_analysis/data/DEC_roadstrails/DEC_roadstrails/Decroadstrails.shp\")\ntrails = roads_trails.loc[roads_trails.ASSET=='FOOT TRAIL'].copy()\n\n# County boundaries in New York state (Polygon)\ncounties = gpd.read_file(\"../../../spatial_analysis/data/NY_county_boundaries/NY_county_boundaries/NY_county_boundaries.shp\")\n```\n:::\n\n\nNext, we create a map from all four GeoDataFrames.  \n\nThe `plot()` method takes as (optional) input several parameters that can be used to customize the appearance.  Most importantly, setting a value for `ax` ensures that all of the information is plotted on the same map.\n\n::: {.cell execution='{\"iopub.execute_input\":\"2023-04-20T20:47:52.836954Z\",\"iopub.status.busy\":\"2023-04-20T20:47:52.836619Z\",\"iopub.status.idle\":\"2023-04-20T20:47:54.158148Z\",\"shell.execute_reply\":\"2023-04-20T20:47:54.157002Z\"}' papermill='{\"duration\":1.330946,\"end_time\":\"2023-04-20T20:47:54.160524\",\"exception\":false,\"start_time\":\"2023-04-20T20:47:52.829578\",\"status\":\"completed\"}' tags='[]' execution_count=10}\n``` {.python .cell-code}\n# Define a base map with county boundaries\nax = counties.plot(figsize=(10,10), color='none', edgecolor='gainsboro', zorder=3)\n\n# Add wild lands, campsites, and foot trails to the base map\nwild_lands.plot(color='lightgreen', ax=ax)\ncampsites.plot(color='maroon', markersize=2, ax=ax)\ntrails.plot(color='black', markersize=1, ax=ax)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](1_your-first-map_files/figure-html/cell-11-output-2.png){width=794 height=623}\n:::\n:::\n\n\nIt looks like the northeastern part of the state would be a great option for a camping trip!\n\n# Your turn\n\nThis feels complex at first, but you've already learned enough to do important analysis. See for yourself as you **[identify remote areas](https://www.kaggle.com/kernels/fork/5832167)** of the Philippines where a non-profit can expand its operations.\n\n---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/geospatial-analysis/discussion) to chat with other learners.*\n\n",
    "supporting": [
      "1_your-first-map_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}