{
  "hash": "5273d7d7784a4137326a20a92ed48b62",
  "result": {
    "markdown": "---\ntitle: Numpy 기본\nauthor: Sieun Shim\ndate: '2023-03-21'\ncategories:\n  - code\ntoc: true\nimage: numpy.png\n---\n\n# \"Numpy 기본\"\n> numpy 기본 코드 실습\n\n- toc: true\n- branch: master\n- badges: true\n- comments: true\n- author: Jiho Yeo\n- categories: [jupyter, python]\n\n\n**도구 - 넘파이(NumPy)**\n\n*넘파이(NumPy)는 파이썬의 과학 컴퓨팅을 위한 기본 라이브러리입니다. 넘파이의 핵심은 강력한 N-차원 배열 객체입니다. 또한 선형 대수, 푸리에(Fourier) 변환, 유사 난수 생성과 같은 유용한 함수들도 제공합니다.\"\n\n<table align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https://colab.research.google.com/github/rickiepark/handson-ml2/blob/master/tools_numpy.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />구글 코랩에서 실행하기</a>\n  </td>\n</table>\n\n   ⠀⠀⠀  \n\n# 배열 생성\n\n`numpy`를 임포트해보죠. 대부분의 사람들이 `np`로 알리아싱하여 임포트합니다:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n## `np.zeros`\n\n`zeros` 함수는 0으로 채워진 배열을 만듭니다:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnp.zeros(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\narray([0., 0., 0., 0., 0.])\n```\n:::\n:::\n\n\n2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 $3 \\times 4$ 크기의 행렬입니다:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnp.zeros((3,4))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```\n:::\n:::\n\n\n## 용어\n\n* 넘파이에서 각 차원을 **축**(axis)이라고 합니다.\n* 축의 개수를 **랭크**(rank)라고 합니다.\n    * 예를 들어, 위의 $3 \\times 4$ 행렬은 랭크 2인 배열입니다(즉 2차원입니다).\n    * 첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.\n* 배열의 축 길이를 배열의 **크기**(shape)라고 합니다.\n    * 예를 들어, 위 행렬의 크기는 `(3, 4)`입니다.\n    * 랭크는 크기의 길이와 같습니다.\n* 배열의 **사이즈**(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(가령, $3 \\times 4=12$).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\na = np.zeros((3,4))\na\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\na.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(3, 4)\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\na.ndim  # len(a.shape)와 같습니다\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\na.size\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n12\n```\n:::\n:::\n\n\n## N-차원 배열\n임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 `(2,3,4)`인 3D 배열(랭크=3)입니다:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nnp.zeros((2,2,5))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]],\n\n       [[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])\n```\n:::\n:::\n\n\n## 배열 타입\n넘파이 배열의 타입은 `ndarray`입니다:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntype(np.zeros((3,4)))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnumpy.ndarray\n```\n:::\n:::\n\n\n## `np.ones`\n`ndarray`를 만들 수 있는 넘파이 함수가 많습니다.\n\n다음은 1로 채워진 $3 \\times 4$ 크기의 행렬입니다:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nnp.ones((3,4))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n```\n:::\n:::\n\n\n## `np.full`\n주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 `π`로 채워진 $3 \\times 4$ 크기의 행렬입니다:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nnp.full((3,4), np.pi)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([[3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265]])\n```\n:::\n:::\n\n\n## `np.empty`\n초기화되지 않은 $2 \\times 3$ 크기의 배열을 만듭니다(배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다):\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nnp.empty((2,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n## np.array\n`array` 함수는 파이썬 리스트를 사용하여 `ndarray`를 초기화합니다:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nnp.array([[1,2,3,4], [10, 20, 30, 40]])\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([[ 1,  2,  3,  4],\n       [10, 20, 30, 40]])\n```\n:::\n:::\n\n\n## `np.arange`\n파이썬의 기본 `range` 함수와 비슷한 넘파이 `arange` 함수를 사용하여 `ndarray`를 만들 수 있습니다:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nnp.arange(1, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([1, 2, 3, 4])\n```\n:::\n:::\n\n\n부동 소수도 가능합니다:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nnp.arange(1.0, 5.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\narray([1., 2., 3., 4.])\n```\n:::\n:::\n\n\n파이썬의 기본 `range` 함수처럼 건너 뛰는 정도를 지정할 수 있습니다:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nnp.arange(1, 5, 0.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])\n```\n:::\n:::\n\n\n부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nprint(np.arange(0, 5/3, 1/3)) # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.\nprint(np.arange(0, 5/3, 0.333333333))\nprint(np.arange(0, 5/3, 0.333333334))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333334]\n```\n:::\n:::\n\n\nfor loops를 사용하지 않고 전체 array에 대한 연산 수행이 가능합니다.  \n평균적으로 Numpy-based 알고리즘은 10~100배 정도 속도가 더 빠르고 적은 메모리를 사용합니다.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmy_arr = np.arange(1000000)\nmy_list = list(range(1000000))\n\n%time for _ in range(10): my_arr2 = my_arr * 2\n%time for _ in range(10): my_list2 = [x * 2 for x in my_list]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWall time: 26.9 ms\nWall time: 930 ms\n```\n:::\n:::\n\n\nFor loop를 돌릴 때의 속도 비교\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsize = 10\nfor x in range(size): x ** 2\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nimport sys\n\nsize = 10\n\n%timeit for x in range(size): x ** 2\n# out: 10 loops, best of 3: 136 ms per loop\n\n# avoid this\n%timeit for x in np.arange(size): x ** 2\n# out: 1 loops, best of 3: 1.16 s per loop\n\n# use this\n%timeit np.arange(size) ** 2\n# out: 100 loops, best of 3: 19.5 ms per loop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.64 µs ± 94.7 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n2.89 µs ± 138 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n1.67 µs ± 67.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n```\n:::\n:::\n\n\n## `np.linspace`\n이런 이유로 부동 소수를 사용할 땐 `arange` 대신에 `linspace` 함수를 사용하는 것이 좋습니다. `linspace` 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다(`arange`와는 다르게 최댓값이 **포함**됩니다):\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint(np.linspace(0, 5/3, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n```\n:::\n:::\n\n\n## `np.rand`와 `np.randn`\n넘파이의 `random` 모듈에는 `ndarray`를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다.  \n예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 $3 \\times 4$ 행렬을 초기화합니다:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nnp.random.rand(3,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\narray([[0.63349128, 0.77717243, 0.10009739, 0.03188153],\n       [0.0918524 , 0.76575233, 0.43427768, 0.94000705],\n       [0.36137165, 0.18162919, 0.83395484, 0.79271537]])\n```\n:::\n:::\n\n\n다음은 평균이 0이고 분산이 1인 일변량 [정규 분포](https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%EB%B6%84%ED%8F%AC)(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 $3 \\times 4$ 행렬입니다:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nnp.random.randn(3,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\narray([[-0.70097415, -0.98702437, -0.01849017,  0.35823448],\n       [ 0.34500825, -1.29751445,  0.75065157,  1.23198251],\n       [-0.9868482 ,  3.32206027, -0.80559055, -0.55580027]])\n```\n:::\n:::\n\n\n이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다(더 자세한 것은 [맷플롯립 튜토리얼](tools_matplotlib.ipynb)을 참고하세요):\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nplt.hist(np.random.rand(100000), density=True, bins=100, histtype=\"step\", color=\"blue\", label=\"rand\")\nplt.hist(np.random.randn(100000), density=True, bins=100, histtype=\"step\", color=\"red\", label=\"randn\")\nplt.axis([-2.5, 2.5, 0, 1.1])\nplt.legend(loc = \"upper left\")\nplt.title(\"Random distributions\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](week_1a_numpy_files/figure-html/cell-26-output-1.png){width=589 height=449}\n:::\n:::\n\n\n## np.fromfunction\n함수를 사용하여 `ndarray`를 초기화할 수도 있습니다:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndef my_function(z, y, x):\n    return x + 10 * y + 100 * z\n\nnp.fromfunction(my_function, (3, 2, 10))\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([[[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n        [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.]],\n\n       [[100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n        [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.]],\n\n       [[200., 201., 202., 203., 204., 205., 206., 207., 208., 209.],\n        [210., 211., 212., 213., 214., 215., 216., 217., 218., 219.]]])\n```\n:::\n:::\n\n\n넘파이는 먼저 크기가 `(3, 2, 10)`인 세 개의 `ndarray`(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, `z` 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다:\n\n    [[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n      [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n    \n     [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n      [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n    \n     [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]\n      [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]\n\n위의 식 `x + 10 * y + 100 * z`에서 `x`, `y`, `z`는 사실 `ndarray`입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 `my_function`이 원소마다 호출되는 것이 아니고 딱 **한 번** 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다.\n\n# 배열 데이터\n## `dtype`\n넘파이의 `ndarray`는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. `dtype` 속성으로 쉽게 데이터 타입을 확인할 수 있습니다:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nc = np.arange(1, 5)\nprint(c.dtype, c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nint32 [1 2 3 4]\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nc = np.arange(1.0, 5.0)\nprint(c.dtype, c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfloat64 [1. 2. 3. 4.]\n```\n:::\n:::\n\n\n넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 `dtype` 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nd = np.arange(1, 5, dtype=np.complex64)\nprint(d.dtype, d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncomplex64 [1.+0.j 2.+0.j 3.+0.j 4.+0.j]\n```\n:::\n:::\n\n\n가능한 데이터 타입은 `int8`, `int16`, `int32`, `int64`, `uint8`|`16`|`32`|`64`, `float16`|`32`|`64`, `complex64`|`128`가 있습니다. 전체 리스트는 [온라인 문서](http://docs.scipy.org/doc/numpy/user/basics.types.html)를 참고하세요.\n\n## `itemsize`\n`itemsize` 속성은 각 아이템의 크기(바이트)를 반환합니다:\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ne = np.arange(1, 5, dtype=np.complex64)\ne.itemsize\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n8\n```\n:::\n:::\n\n\n## `data` 버퍼\n배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. `data` 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nf = np.array([[1,2],[1000, 2000]], dtype=np.int32)\nf.data\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n<memory at 0x0000028D25839790>\n```\n:::\n:::\n\n\n파이썬 2에서는 `f.data`가 버퍼이고 파이썬 3에서는 memoryview입니다.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nif (hasattr(f.data, \"tobytes\")):\n    data_bytes = f.data.tobytes() # python 3\nelse:\n    data_bytes = memoryview(f.data).tobytes() # python 2\n\ndata_bytes\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nb'\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xe8\\x03\\x00\\x00\\xd0\\x07\\x00\\x00'\n```\n:::\n:::\n\n\n여러 개의 `ndarray`가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다.\n\n# 배열 크기 변경\n\n## 자신을 변경\n\n`ndarray`의 `shape` 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ng = np.arange(24)\nprint(g)\nprint(\"랭크:\", g.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n랭크: 1\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ng.shape = (6, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n랭크: 2\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ng.shape = (2, 3, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n랭크: 3\n```\n:::\n:::\n\n\n## `reshape`\n\n`reshape` 함수는 동일한 데이터를 가리키는 새로운 `ndarray` 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ng2 = g.reshape(4,6)\nprint(g2)\nprint(\"랭크:\", g2.ndim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]]\n랭크: 2\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ng[0,0,0] = 10\ng2\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\narray([[10,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n```\n:::\n:::\n\n\n행 1, 열 2의 원소를 999로 설정합니다(인덱싱 방식은 아래를 참고하세요).\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ng2[1, 2] = 999\ng2\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\narray([[ 10,   1,   2,   3,   4,   5],\n       [  6,   7, 999,   9,  10,  11],\n       [ 12,  13,  14,  15,  16,  17],\n       [ 18,  19,  20,  21,  22,  23]])\n```\n:::\n:::\n\n\n이에 상응하는 `g`의 원소도 수정됩니다.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ng\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\narray([[[ 10,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])\n```\n:::\n:::\n\n\n완전히 다른 공간에 값만 같게 복사를 하고 싶다면 `copy`를 사용.  \n이렇게 할 경우 두 객체는 독립적인 객체로 존재함\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ng2 = g.copy()\ng2\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\narray([[[ 10,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])\n```\n:::\n:::\n\n\n## `ravel`\n\n마지막으로 `ravel` 함수는 동일한 데이터를 가리키는 새로운 1차원 `ndarray`를 반환합니다:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ng.ravel()\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\narray([ 10,   1,   2,   3,   4,   5,   6,   7, 999,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23])\n```\n:::\n:::\n\n\n# 산술 연산\n\n일반적인 산술 연산자(`+`, `-`, `*`, `/`, `//`, `**` 등)는 모두 `ndarray`와 사용할 수 있습니다. 이 연산자는 원소별로 적용됩니다:\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\na = np.array([14, 23, 32, 41])\nb = np.array([5,  4,  3,  2])\nprint(\"a + b  =\", a + b)\nprint(\"a - b  =\", a - b)\nprint(\"a * b  =\", a * b)\nprint(\"a / b  =\", a / b)\nprint(\"a // b  =\", a // b) # 몫\nprint(\"a % b  =\", a % b) # 나머지\nprint(\"a ** b =\", a ** b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na + b  = [19 27 35 43]\na - b  = [ 9 19 29 39]\na * b  = [70 92 96 82]\na / b  = [ 2.8         5.75       10.66666667 20.5       ]\na // b  = [ 2  5 10 20]\na % b  = [4 3 2 1]\na ** b = [537824 279841  32768   1681]\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\n5 ** 3\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n125\n```\n:::\n:::\n\n\n여기 곱셈은 행렬 곱셈이 아닙니다. 행렬 연산은 아래에서 설명합니다.\n\n배열의 크기는 같아야 합니다. 그렇지 않으면 넘파이가 브로드캐스팅 규칙을 적용합니다.\n\n# 브로드캐스팅\n\n일반적으로 넘파이는 동일한 크기의 배열을 기대합니다. 그렇지 않은 상황에는 브로드캐시틍 규칙을 적용합니다:\n\n## 규칙 1\n\n배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nh = np.arange(5).reshape(1, 1, 5)\nh\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\narray([[[0, 1, 2, 3, 4]]])\n```\n:::\n:::\n\n\n여기에 `(1,1,5)` 크기의 3D 배열에 `(5,)` 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nh + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\narray([[[10, 21, 32, 43, 54]]])\n```\n:::\n:::\n\n\n## 규칙 2\n\n특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nk = np.arange(6).reshape(2, 3)\nk\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\narray([[0, 1, 2],\n       [3, 4, 5]])\n```\n:::\n:::\n\n\n`(2,3)` 크기의 2D `ndarray`에 `(2,1)` 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다:\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nk + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\narray([[100, 101, 102],\n       [203, 204, 205]])\n```\n:::\n:::\n\n\n규칙 1과 2를 합치면 다음과 같이 동작합니다:  \n`(2,3)` 크기의 `ndarray`에 `(3,)` 크기의 `ndarray` 더하기\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nk\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\narray([[0, 1, 2],\n       [3, 4, 5]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nk + [100, 200, 300]  # 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\narray([[100, 201, 302],\n       [103, 204, 305]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\ntest = np.array([100, 200, 300])\ntest.shape\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\narray([100, 200, 300])\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\n# step 1\ntest = test.reshape(1,3)\ntest\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\narray([[100, 200, 300]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\n# step 2\nnp.vstack((test,test))\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\narray([[100, 200, 300],\n       [100, 200, 300]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\n# step 3\nnp.concatenate((test,test), axis=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\narray([[100, 200, 300],\n       [100, 200, 300]])\n```\n:::\n:::\n\n\n또 매우 간단히 다음처럼 해도 됩니다:\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nk + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\narray([[1000, 1001, 1002],\n       [1003, 1004, 1005]])\n```\n:::\n:::\n\n\n## 규칙 3\n\n규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nk\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\narray([[0, 1, 2],\n       [3, 4, 5]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\ntry:\n    k + [33, 44]\nexcept ValueError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\noperands could not be broadcast together with shapes (2,3) (2,) \n```\n:::\n:::\n\n\n브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 [온라인 문서](https://docs.scipy.org/doc/numpy-dev/user/basics.broadcasting.html)를 참고하세요.\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\na = np.array([[0.0],[10.0],[20.0],[30.0]])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\narray([[ 0.],\n       [10.],\n       [20.],\n       [30.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\na = np.array([0.0, 10.0, 20.0, 30.0])\nb = np.array([1.0, 2.0, 3.0])\na[:, np.newaxis] + b\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\narray([[ 1.,  2.,  3.],\n       [11., 12., 13.],\n       [21., 22., 23.],\n       [31., 32., 33.]])\n```\n:::\n:::\n\n\n## 업캐스팅\n\n`dtype`이 다른 배열을 합칠 때 넘파이는 (실제 값에 상관없이) 모든 값을 다룰 수 있는 타입으로 업캐스팅합니다.\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nk1 = np.arange(0, 5, dtype=np.uint8)\nprint(k1.dtype, k1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nuint8 [0 1 2 3 4]\n```\n:::\n:::\n\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nk2 = k1 + np.array([5, 6, 7, 8, 9], dtype=np.int8)\nprint(k2.dtype, k2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nint16 [ 5  7  9 11 13]\n```\n:::\n:::\n\n\n모든 `int8`과 `uint8` 값(-128에서 255까지)을 표현하기 위해 `int16`이 필요합니다. 이 코드에서는 `uint8`이면 충분하지만 업캐스팅되었습니다.\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nk3 = k1 + 1.5\nprint(k3.dtype, k3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfloat64 [1.5 2.5 3.5 4.5 5.5]\n```\n:::\n:::\n\n\n# 조건 연산자\n\n조건 연산자도 원소별로 적용됩니다:\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nm = np.array([20, -5, 30, 40])\nm < [15, 16, 35, 36]\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\narray([False,  True,  True, False])\n```\n:::\n:::\n\n\n브로드캐스팅을 사용합니다:\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\nm < 25  # m < [25, 25, 25, 25] 와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\narray([ True,  True, False, False])\n```\n:::\n:::\n\n\n불리언 인덱싱과 함께 사용하면 아주 유용합니다(아래에서 설명하겠습니다).\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nm[m < 25]\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\narray([20, -5])\n```\n:::\n:::\n\n\n# 수학 함수와 통계 함수\n\n`ndarray`에서 사용할 수 있는 수학 함수와 통계 함수가 많습니다.\n\n## `ndarray` 메서드\n\n일부 함수는 `ndarray` 메서드로 제공됩니다. 예를 들면:\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nprint(a)\nprint(\"평균 =\", a.mean()) # 축에 따라서 평균 구하고 싶으면 axis=0 1 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n평균 = 6.766666666666667\n```\n:::\n:::\n\n\n이 명령은 크기에 상관없이 `ndarray`에 있는 모든 원소의 평균을 계산합니다.\n\n다음은 유용한 `ndarray` 메서드입니다:\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nfor func in (a.min, a.max, a.sum, a.prod, a.std, a.var):\n    print(func.__name__, \"=\", func())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmin = -2.5\nmax = 12.0\nsum = 40.6\nprod = -71610.0\nstd = 5.084835843520964\nvar = 25.855555555555554\n```\n:::\n:::\n\n\n이 함수들은 선택적으로 매개변수 `axis`를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면:\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\nc = np.arange(24).reshape(2,3,4)\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nc.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\narray([[12, 14, 16, 18],\n       [20, 22, 24, 26],\n       [28, 30, 32, 34]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\nc.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\narray([[12, 15, 18, 21],\n       [48, 51, 54, 57]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nc.sum(axis=2) # 세 번째 축을 따라 더함, 결과는 2x3 배열\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\narray([[ 6, 22, 38],\n       [54, 70, 86]])\n```\n:::\n:::\n\n\n여러 축에 대해서 더할 수도 있습니다:\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\nc.sum(axis=(0,2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\narray([ 60,  92, 124])\n```\n:::\n:::\n\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\n0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n(60, 92, 124)\n```\n:::\n:::\n\n\n## 일반 함수\n\n넘파이는 일반 함수(universal function) 또는 **ufunc**라고 부르는 원소별 함수를 제공합니다. 예를 들면 `square` 함수는 원본 `ndarray`를 복사하여 각 원소를 제곱한 새로운 `ndarray` 객체를 반환합니다:\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nnp.square(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\narray([[  6.25,   9.61,  49.  ],\n       [100.  , 121.  , 144.  ]])\n```\n:::\n:::\n\n\n다음은 유용한 단항 일반 함수들입니다:\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\nprint(\"원본 ndarray\")\nprint(a)\nfor func in (np.abs, np.sqrt, np.exp, np.log, np.sign, np.ceil, np.modf, np.isnan, np.cos):\n    print(\"\\n\", func.__name__)\n    print(func(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n원본 ndarray\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n absolute\n[[ 2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n sqrt\n[[       nan 1.76068169 2.64575131]\n [3.16227766 3.31662479 3.46410162]]\n\n exp\n[[8.20849986e-02 2.21979513e+01 1.09663316e+03]\n [2.20264658e+04 5.98741417e+04 1.62754791e+05]]\n\n log\n[[       nan 1.13140211 1.94591015]\n [2.30258509 2.39789527 2.48490665]]\n\n sign\n[[-1.  1.  1.]\n [ 1.  1.  1.]]\n\n ceil\n[[-2.  4.  7.]\n [10. 11. 12.]]\n\n modf\n(array([[-0.5,  0.1,  0. ],\n       [ 0. ,  0. ,  0. ]]), array([[-2.,  3.,  7.],\n       [10., 11., 12.]]))\n\n isnan\n[[False False False]\n [False False False]]\n\n cos\n[[-0.80114362 -0.99913515  0.75390225]\n [-0.83907153  0.0044257   0.84385396]]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Public\\Documents\\ESTsoft\\CreatorTemp\\ipykernel_13596\\4103705789.py:5: RuntimeWarning:\n\ninvalid value encountered in sqrt\n\nC:\\Users\\Public\\Documents\\ESTsoft\\CreatorTemp\\ipykernel_13596\\4103705789.py:5: RuntimeWarning:\n\ninvalid value encountered in log\n\n```\n:::\n:::\n\n\n## 이항 일반 함수\n\n두 개의 `ndarray`에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다:\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\na = np.array([1, -2, 3, 4])\nb = np.array([2, 8, -1, 7])\nnp.add(a, b)  # a + b 와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\narray([ 3,  6,  2, 11])\n```\n:::\n:::\n\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\nnp.greater(a, b)  # a > b 와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\narray([False, False,  True, False])\n```\n:::\n:::\n\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\nnp.maximum(a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\narray([2, 8, 3, 7])\n```\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\nnp.copysign(a, b)\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\narray([ 1.,  2., -3.,  4.])\n```\n:::\n:::\n\n\n# 배열 인덱싱 ★\n\n## 1차원 배열\n\n1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다:\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\na = np.array([1, 5, 3, 19, 13, 7, 3])\na[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\n19\n```\n:::\n:::\n\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\na[2:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\narray([ 3, 19, 13])\n```\n:::\n:::\n\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\na[2:-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\narray([ 3, 19, 13,  7])\n```\n:::\n:::\n\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\na[:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\narray([1, 5])\n```\n:::\n:::\n\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\na[2::2]\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\narray([ 3, 13,  3])\n```\n:::\n:::\n\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\na[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\narray([ 3,  7, 13, 19,  3,  5,  1])\n```\n:::\n:::\n\n\n물론 원소를 수정할 수 있죠:\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\na[3]=999\na\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\narray([  1,   5,   3, 999,  13,   7,   3])\n```\n:::\n:::\n\n\n슬라이싱을 사용해 `ndarray`를 수정할 수 있습니다:\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\na[2:5] = [997, 998, 999]\na\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\narray([  1,   5, 997, 998, 999,   7,   3])\n```\n:::\n:::\n\n\n## 보통의 파이썬 배열과 차이점\n\n보통의 파이썬 배열과 대조적으로 `ndarray` 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\na = np.array([1, 5, 3, 19, 13, 7, 3])\na\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\narray([ 1,  5,  3, 19, 13,  7,  3])\n```\n:::\n:::\n\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\na[2:5] = -1\na\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\narray([ 1,  5, -1, -1, -1,  7,  3])\n```\n:::\n:::\n\n\nList는 브로드캐스팅으로 할당이 안됨\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\nb = [1, 5, 3, 19, 13, 7, 3]\n#b[2:5] = -1\n```\n:::\n\n\n또한 이런 식으로 `ndarray` 크기를 늘리거나 줄일 수 없습니다:\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\ntry:\n    a[2:5] = [1,2,3,4,5,6]  # 너무 길어요\nexcept ValueError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncould not broadcast input array from shape (6,) into shape (3,)\n```\n:::\n:::\n\n\n원소를 삭제할 수도 없습니다:\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\ntry:\n    del a[2:5]\nexcept ValueError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncannot delete array elements\n```\n:::\n:::\n\n\nList에서는 삭제가 가능\n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\nb = [1, 5, 3, 19, 13, 7, 3]\ndel b[2:5]\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\n[1, 5, 7, 3]\n```\n:::\n:::\n\n\n중요한 점은 `ndarray`의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 `ndarray`가 수정됩니다!\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\na_slice = a[2:6]\na_slice[1] = 1000\na  # 원본 배열이 수정됩니다!\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\narray([   1,    5,   -1, 1000,   -1,    7,    3])\n```\n:::\n:::\n\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\na[3] = 2000\na_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다!\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\narray([  -1, 2000,   -1,    7])\n```\n:::\n:::\n\n\n데이터를 복사하려면 `copy` 메서드를 사용해야 합니다:\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\nanother_slice = a[2:6].copy()\nanother_slice[1] = 3000\na  # 원본 배열이 수정되지 않습니다.\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\narray([   1,    5,   -1, 2000,   -1,    7,    3])\n```\n:::\n:::\n\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\na[3] = 4000\nanother_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다.\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\narray([  -1, 3000,   -1,    7])\n```\n:::\n:::\n\n\n## 다차원 배열\n\n다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\nb = np.arange(48).reshape(4, 12)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\nb[1, 2]  # 행 1, 열 2\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n14\n```\n:::\n:::\n\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\nb[1, :]  # 행 1, 모든 열\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n```\n:::\n:::\n\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\nb[:, 1]  # 모든 행, 열 1\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\narray([ 1, 13, 25, 37])\n```\n:::\n:::\n\n\n**주의**: 다음 두 표현에는 미묘한 차이가 있습니다: \n\n::: {.cell execution_count=102}\n``` {.python .cell-code}\nb[1, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n```\n:::\n:::\n\n\n::: {.cell execution_count=103}\n``` {.python .cell-code}\nb[1, :].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\n(12,)\n```\n:::\n:::\n\n\n::: {.cell execution_count=104}\n``` {.python .cell-code}\nb[1:2, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\narray([[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=105}\n``` {.python .cell-code}\nb[1:2, :].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n(1, 12)\n```\n:::\n:::\n\n\n첫 번째 표현식은 `(12,)` 크기인 1D 배열로 행이 하나입니다. 두 번째는 `(1, 12)` 크기인 2D 배열로 같은 행을 반환합니다.\n\n## 팬시 인덱싱(Fancy indexing)\n\n관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.\n\n::: {.cell execution_count=106}\n``` {.python .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=107}\n``` {.python .cell-code}\nb[(0,2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```\narray([[ 2,  3,  4],\n       [26, 27, 28]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=108}\n``` {.python .cell-code}\nb[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\narray([[11,  2, 11],\n       [23, 14, 23],\n       [35, 26, 35],\n       [47, 38, 47]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=109}\n``` {.python .cell-code}\nb[(2,3), 0:2] # b[2:,0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\narray([[24, 25],\n       [36, 37]])\n```\n:::\n:::\n\n\n여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D `ndarray`를 반환됩니다.\n\n::: {.cell execution_count=110}\n``` {.python .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=111}\n``` {.python .cell-code}\nb[(-1, 2, -1, 2), (5, 9, 1, 9)]  # returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\narray([41, 33, 37, 33])\n```\n:::\n:::\n\n\n## 고차원\n\n고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다:\n\n::: {.cell execution_count=112}\n``` {.python .cell-code}\nc = b.reshape(4,2,6)\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\narray([[[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]],\n\n       [[12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23]],\n\n       [[24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35]],\n\n       [[36, 37, 38, 39, 40, 41],\n        [42, 43, 44, 45, 46, 47]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=113}\n``` {.python .cell-code}\nc[2, 1, 4]  # 행렬 2, 행 1, 열 4\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```\n34\n```\n:::\n:::\n\n\n::: {.cell execution_count=114}\n``` {.python .cell-code}\nc[2, :, 3]  # 행렬 2, 모든 행, 열 3\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\narray([27, 33])\n```\n:::\n:::\n\n\n어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:\n\n::: {.cell execution_count=115}\n``` {.python .cell-code}\nc[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\narray([30, 31, 32, 33, 34, 35])\n```\n:::\n:::\n\n\n## 생략 부호 (`...`)\n\n생략 부호(`...`)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.\n\n::: {.cell execution_count=116}\n``` {.python .cell-code}\nc[2, ...]  #  행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\narray([[24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=117}\n``` {.python .cell-code}\nc[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\narray([30, 31, 32, 33, 34, 35])\n```\n:::\n:::\n\n\n::: {.cell execution_count=118}\n``` {.python .cell-code}\nc[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=118}\n```\narray([27, 33])\n```\n:::\n:::\n\n\n::: {.cell execution_count=119}\n``` {.python .cell-code}\nc[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```\narray([[ 3,  9],\n       [15, 21],\n       [27, 33],\n       [39, 45]])\n```\n:::\n:::\n\n\n## 불리언 인덱싱\n\n불리언 값을 가진 `ndarray`를 사용해 축의 인덱스를 지정할 수 있습니다.\n\n::: {.cell execution_count=120}\n``` {.python .cell-code}\nb = np.arange(48).reshape(4, 12)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=121}\n``` {.python .cell-code}\nrows_on = np.array([True, False, True, False])\nb[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=122}\n``` {.python .cell-code}\ncols_on = np.array([False, True, False] * 4)\nb[:, cols_on]  # 모든 행, 열 1, 4, 7, 10\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```\narray([[ 1,  4,  7, 10],\n       [13, 16, 19, 22],\n       [25, 28, 31, 34],\n       [37, 40, 43, 46]])\n```\n:::\n:::\n\n\n## `np.ix_`\n\n여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 `ix_` 함수를 사용합니다:\n\n::: {.cell execution_count=123}\n``` {.python .cell-code}\nb[np.ix_((0,2),(1,4,7,10))]\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=124}\n``` {.python .cell-code}\nb[np.ix_(rows_on, cols_on)]\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=125}\n``` {.python .cell-code}\nnp.ix_(rows_on, cols_on)\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```\n(array([[0],\n        [2]], dtype=int64),\n array([[ 1,  4,  7, 10]], dtype=int64))\n```\n:::\n:::\n\n\n`ndarray`와 같은 크기의 불리언 배열을 사용하면 해당 위치가 `True`인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다:\n\n::: {.cell execution_count=126}\n``` {.python .cell-code}\nb.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\n(4, 12)\n```\n:::\n:::\n\n\n::: {.cell execution_count=127}\n``` {.python .cell-code}\nb[b % 3 == 1] # 나머지\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\narray([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46])\n```\n:::\n:::\n\n\n# 반복\n\n`ndarray`를 반복하는 것은 일반적인 파이썬 배열을 반복한는 것과 매우 유사합니다. 다차원 배열을 반복하면 첫 번째 축에 대해서 수행됩니다.\n\n::: {.cell execution_count=128}\n``` {.python .cell-code}\nc = np.arange(24).reshape(2, 3, 4)  # 3D 배열 (두 개의 3x4 행렬로 구성됨)\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=129}\n``` {.python .cell-code}\nfor m in c:\n    print(\"아이템:\")\n    print(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n아이템:\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n아이템:\n[[12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=130}\n``` {.python .cell-code}\nfor i in range(len(c)):  # len(c) == c.shape[0]\n    print(\"아이템:\")\n    print(c[i]) # c[i,:,:]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n아이템:\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n아이템:\n[[12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n```\n:::\n:::\n\n\n`ndarray`에 있는 모든 원소를 반복하려면 `flat` 속성을 사용합니다:\n\n::: {.cell execution_count=131}\n``` {.python .cell-code}\nfor i in c.flat:\n    print(\"아이템:\", i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n아이템: 0\n아이템: 1\n아이템: 2\n아이템: 3\n아이템: 4\n아이템: 5\n아이템: 6\n아이템: 7\n아이템: 8\n아이템: 9\n아이템: 10\n아이템: 11\n아이템: 12\n아이템: 13\n아이템: 14\n아이템: 15\n아이템: 16\n아이템: 17\n아이템: 18\n아이템: 19\n아이템: 20\n아이템: 21\n아이템: 22\n아이템: 23\n```\n:::\n:::\n\n\n# 배열 쌓기\n\n종종 다른 배열을 쌓아야 할 때가 있습니다. 넘파이는 이를 위해 몇 개의 함수를 제공합니다. 먼저 배열 몇 개를 만들어 보죠.\n\n::: {.cell execution_count=132}\n``` {.python .cell-code}\nq1 = np.full((3,4), 1.0)\nq1\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=133}\n``` {.python .cell-code}\nq2 = np.full((4,4), 2.0)\nq2\n```\n\n::: {.cell-output .cell-output-display execution_count=133}\n```\narray([[2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=134}\n``` {.python .cell-code}\nq3 = np.full((3,4), 3.0)\nq3\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\narray([[3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n## `vstack`\n\n`vstack` 함수를 사용하여 수직으로 쌓아보죠:\n\n::: {.cell execution_count=135}\n``` {.python .cell-code}\nq4 = np.vstack((q1, q2, q3))\nq4\n```\n\n::: {.cell-output .cell-output-display execution_count=135}\n```\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=136}\n``` {.python .cell-code}\nq4.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=136}\n```\n(10, 4)\n```\n:::\n:::\n\n\nq1, q2, q3가 모두 같은 크기이므로 가능합니다(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다).\n\n## `hstack`\n\n`hstack`을 사용해 수평으로도 쌓을 수 있습니다:\n\n::: {.cell execution_count=137}\n``` {.python .cell-code}\nq5 = np.hstack((q1, q3))\nq5\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=138}\n``` {.python .cell-code}\nq5.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=138}\n```\n(3, 8)\n```\n:::\n:::\n\n\nq1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다:\n\n::: {.cell execution_count=139}\n``` {.python .cell-code}\ntry:\n    q5 = np.hstack((q1, q2, q3))\nexcept ValueError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nall the input array dimensions except for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 3 and the array at index 1 has size 4\n```\n:::\n:::\n\n\n## `concatenate`\n\n`concatenate` 함수는 지정한 축으로도 배열을 쌓습니다.\n\n::: {.cell execution_count=140}\n``` {.python .cell-code}\nq7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일\nq7\n```\n\n::: {.cell-output .cell-output-display execution_count=140}\n```\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=141}\n``` {.python .cell-code}\nq7.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=141}\n```\n(10, 4)\n```\n:::\n:::\n\n\n예상했겠지만 `hstack`은 `axis=1`으로 `concatenate`를 호출하는 것과 같습니다.\n\n::: {.cell execution_count=142}\n``` {.python .cell-code}\nq5 = np.hstack((q1, q3))\nq5\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=143}\n``` {.python .cell-code}\nnp.concatenate((q1,q3), axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=143}\n```\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n## `stack`\n\n`stack` 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.\n\n::: {.cell execution_count=144}\n``` {.python .cell-code}\nq1.shape, q3.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=144}\n```\n((3, 4), (3, 4))\n```\n:::\n:::\n\n\n::: {.cell execution_count=145}\n``` {.python .cell-code}\nq8 = np.stack((q1, q3))\nq8\n```\n\n::: {.cell-output .cell-output-display execution_count=145}\n```\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=146}\n``` {.python .cell-code}\nq8.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=146}\n```\n(2, 3, 4)\n```\n:::\n:::\n\n\n# 배열 분할\n\n분할은 쌓기의 반대입니다. 예를 들어 `vsplit` 함수는 행렬을 수직으로 분할합니다.\n\n먼저 6x4 행렬을 만들어 보죠:\n\n::: {.cell execution_count=147}\n``` {.python .cell-code}\nr = np.arange(24).reshape(6,4)\nr\n```\n\n::: {.cell-output .cell-output-display execution_count=147}\n```\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n```\n:::\n:::\n\n\n수직으로 동일한 크기로 나누어 보겠습니다:\n\n::: {.cell execution_count=148}\n``` {.python .cell-code}\nr1, r2, r3 = np.vsplit(r, 3)\nr1\n```\n\n::: {.cell-output .cell-output-display execution_count=148}\n```\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=149}\n``` {.python .cell-code}\nr2\n```\n\n::: {.cell-output .cell-output-display execution_count=149}\n```\narray([[ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=150}\n``` {.python .cell-code}\nr3\n```\n\n::: {.cell-output .cell-output-display execution_count=150}\n```\narray([[16, 17, 18, 19],\n       [20, 21, 22, 23]])\n```\n:::\n:::\n\n\n`split` 함수는 주어진 축을 따라 배열을 분할합니다. `vsplit`는 `axis=0`으로 `split`를 호출하는 것과 같습니다. `hsplit` 함수는 `axis=1`로 `split`를 호출하는 것과 같습니다:\n\n::: {.cell execution_count=151}\n``` {.python .cell-code}\nr4, r5 = np.hsplit(r, 2)\nr4\n```\n\n::: {.cell-output .cell-output-display execution_count=151}\n```\narray([[ 0,  1],\n       [ 4,  5],\n       [ 8,  9],\n       [12, 13],\n       [16, 17],\n       [20, 21]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=152}\n``` {.python .cell-code}\nr5\n```\n\n::: {.cell-output .cell-output-display execution_count=152}\n```\narray([[ 2,  3],\n       [ 6,  7],\n       [10, 11],\n       [14, 15],\n       [18, 19],\n       [22, 23]])\n```\n:::\n:::\n\n\n# 배열 전치\n\n`transpose` 메서드는 주어진 순서대로 축을 뒤바꾸어 `ndarray` 데이터에 대한 새로운 뷰를 만듭니다.\n\n예를 위해 3D 배열을 만들어 보죠:\n\n::: {.cell execution_count=153}\n``` {.python .cell-code}\nt = np.arange(24).reshape(4,2,3)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=153}\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]],\n\n       [[12, 13, 14],\n        [15, 16, 17]],\n\n       [[18, 19, 20],\n        [21, 22, 23]]])\n```\n:::\n:::\n\n\n`0, 1, 2`(깊이, 높이, 너비) 축을 `1, 2, 0` (깊이→너비, 높이→깊이, 너비→높이) 순서로 바꾼 `ndarray`를 만들어 보겠습니다:\n\n::: {.cell execution_count=154}\n``` {.python .cell-code}\nt1 = t.transpose((1,2,0))\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=154}\n```\narray([[[ 0,  6, 12, 18],\n        [ 1,  7, 13, 19],\n        [ 2,  8, 14, 20]],\n\n       [[ 3,  9, 15, 21],\n        [ 4, 10, 16, 22],\n        [ 5, 11, 17, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=155}\n``` {.python .cell-code}\nt1.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=155}\n```\n(2, 3, 4)\n```\n:::\n:::\n\n\n`transpose` 기본값은 차원의 순서를 역전시킵니다:\n\n::: {.cell execution_count=156}\n``` {.python .cell-code}\nt2 = t.transpose()  # t.transpose((2, 1, 0))와 동일\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=156}\n```\narray([[[ 0,  6, 12, 18],\n        [ 3,  9, 15, 21]],\n\n       [[ 1,  7, 13, 19],\n        [ 4, 10, 16, 22]],\n\n       [[ 2,  8, 14, 20],\n        [ 5, 11, 17, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=157}\n``` {.python .cell-code}\nt2.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=157}\n```\n(3, 2, 4)\n```\n:::\n:::\n\n\n넘파이는 두 축을 바꾸는 `swapaxes` 함수를 제공합니다. 예를 들어 깊이와 높이를 뒤바꾸어 `t`의 새로운 뷰를 만들어 보죠:\n\n::: {.cell execution_count=158}\n``` {.python .cell-code}\nt3 = t.swapaxes(0,1)  # t.transpose((1, 0, 2))와 동일\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=158}\n```\narray([[[ 0,  1,  2],\n        [ 6,  7,  8],\n        [12, 13, 14],\n        [18, 19, 20]],\n\n       [[ 3,  4,  5],\n        [ 9, 10, 11],\n        [15, 16, 17],\n        [21, 22, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=159}\n``` {.python .cell-code}\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=159}\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5]],\n\n       [[ 6,  7,  8],\n        [ 9, 10, 11]],\n\n       [[12, 13, 14],\n        [15, 16, 17]],\n\n       [[18, 19, 20],\n        [21, 22, 23]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=160}\n``` {.python .cell-code}\nt3.shape, t.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=160}\n```\n((2, 4, 3), (4, 2, 3))\n```\n:::\n:::\n\n\n# 선형 대수학\n\n넘파이 2D 배열을 사용하면 파이썬에서 행렬을 효율적으로 표현할 수 있습니다. 주요 행렬 연산을 간단히 둘러 보겠습니다. 선형 대수학, 벡터와 행렬에 관한 자세한 내용은 [Linear Algebra tutorial](math_linear_algebra.ipynb)를 참고하세요.\n\n## 행렬 전치\n\n`T` 속성은 랭크가 2보다 크거나 같을 때 `transpose()`를 호출하는 것과 같습니다:\n\n::: {.cell execution_count=161}\n``` {.python .cell-code}\nm1 = np.arange(10).reshape(2,5)\nm1\n```\n\n::: {.cell-output .cell-output-display execution_count=161}\n```\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=162}\n``` {.python .cell-code}\nm1.T\n```\n\n::: {.cell-output .cell-output-display execution_count=162}\n```\narray([[0, 5],\n       [1, 6],\n       [2, 7],\n       [3, 8],\n       [4, 9]])\n```\n:::\n:::\n\n\n`T` 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다:\n\n::: {.cell execution_count=163}\n``` {.python .cell-code}\nm2 = np.arange(5)\nm2\n```\n\n::: {.cell-output .cell-output-display execution_count=163}\n```\narray([0, 1, 2, 3, 4])\n```\n:::\n:::\n\n\n::: {.cell execution_count=164}\n``` {.python .cell-code}\nm2.T\n```\n\n::: {.cell-output .cell-output-display execution_count=164}\n```\narray([0, 1, 2, 3, 4])\n```\n:::\n:::\n\n\n먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다:\n\n::: {.cell execution_count=165}\n``` {.python .cell-code}\nm2r = m2.reshape(1,5)\nm2r\n```\n\n::: {.cell-output .cell-output-display execution_count=165}\n```\narray([[0, 1, 2, 3, 4]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=166}\n``` {.python .cell-code}\nm2r.T\n```\n\n::: {.cell-output .cell-output-display execution_count=166}\n```\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])\n```\n:::\n:::\n\n\n## 행렬 곱셈\n\n두 개의 행렬을 만들어 `dot` 메서드로 행렬 [곱셈](https://ko.wikipedia.org/wiki/%ED%96%89%EB%A0%AC_%EA%B3%B1%EC%85%88)을 실행해 보죠.\n\n::: {.cell execution_count=167}\n``` {.python .cell-code}\nn1 = np.arange(10).reshape(2, 5)\nn1\n```\n\n::: {.cell-output .cell-output-display execution_count=167}\n```\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=168}\n``` {.python .cell-code}\nn2 = np.arange(15).reshape(5,3)\nn2\n```\n\n::: {.cell-output .cell-output-display execution_count=168}\n```\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=169}\n``` {.python .cell-code}\nn1.dot(n2)\n```\n\n::: {.cell-output .cell-output-display execution_count=169}\n```\narray([[ 90, 100, 110],\n       [240, 275, 310]])\n```\n:::\n:::\n\n\n**주의**: 앞서 언급한 것처럼 `n1*n2`는 행렬 곱셈이 아니라 원소별 곱셈(또는 [아다마르 곱](https://ko.wikipedia.org/wiki/%EC%95%84%EB%8B%A4%EB%A7%88%EB%A5%B4_%EA%B3%B1)이라 부릅니다)입니다.\n\n## 역행렬과 유사 역행렬\n\n`numpy.linalg` 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 `inv` 함수는 정방 행렬의 역행렬을 계산합니다:\n\n::: {.cell execution_count=170}\n``` {.python .cell-code}\nimport numpy.linalg as linalg\n\nm3 = np.array([[1,2,3],[5,7,11],[21,29,31]])\nm3\n```\n\n::: {.cell-output .cell-output-display execution_count=170}\n```\narray([[ 1,  2,  3],\n       [ 5,  7, 11],\n       [21, 29, 31]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=171}\n``` {.python .cell-code}\nlinalg.inv(m3)\n```\n\n::: {.cell-output .cell-output-display execution_count=171}\n```\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\n```\n:::\n:::\n\n\n`pinv` 함수를 사용하여 [유사 역행렬](https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse)을 계산할 수도 있습니다:\n\n::: {.cell execution_count=172}\n``` {.python .cell-code}\nlinalg.pinv(m3)\n```\n\n::: {.cell-output .cell-output-display execution_count=172}\n```\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\n```\n:::\n:::\n\n\n## 단위 행렬\n\n행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다(작은 소숫점 오차가 있습니다):\n\n::: {.cell execution_count=173}\n``` {.python .cell-code}\nm3.dot(linalg.inv(m3))\n```\n\n::: {.cell-output .cell-output-display execution_count=173}\n```\narray([[ 1.00000000e+00, -1.66533454e-16,  0.00000000e+00],\n       [ 6.31439345e-16,  1.00000000e+00, -1.38777878e-16],\n       [ 5.21110932e-15, -2.38697950e-15,  1.00000000e+00]])\n```\n:::\n:::\n\n\n`eye` 함수는 NxN 크기의 단위 행렬을 만듭니다:\n\n::: {.cell execution_count=174}\n``` {.python .cell-code}\nnp.eye(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n```\n:::\n:::\n\n\n## QR 분해\n\n`qr` 함수는 행렬을 [QR 분해](https://en.wikipedia.org/wiki/QR_decomposition)합니다:\n\n::: {.cell execution_count=175}\n``` {.python .cell-code}\nq, r = linalg.qr(m3)\nq\n```\n\n::: {.cell-output .cell-output-display execution_count=175}\n```\narray([[-0.04627448,  0.98786672,  0.14824986],\n       [-0.23137241,  0.13377362, -0.96362411],\n       [-0.97176411, -0.07889213,  0.22237479]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=176}\n``` {.python .cell-code}\nr\n```\n\n::: {.cell-output .cell-output-display execution_count=176}\n```\narray([[-21.61018278, -29.89331494, -32.80860727],\n       [  0.        ,   0.62427688,   1.9894538 ],\n       [  0.        ,   0.        ,  -3.26149699]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=177}\n``` {.python .cell-code}\nq.dot(r)  # q.r는 m3와 같습니다\n```\n\n::: {.cell-output .cell-output-display execution_count=177}\n```\narray([[ 1.,  2.,  3.],\n       [ 5.,  7., 11.],\n       [21., 29., 31.]])\n```\n:::\n:::\n\n\n## 행렬식\n\n`det` 함수는 [행렬식](https://en.wikipedia.org/wiki/Determinant)을 계산합니다:\n\n::: {.cell execution_count=178}\n``` {.python .cell-code}\nlinalg.det(m3)  # 행렬식 계산\n```\n\n::: {.cell-output .cell-output-display execution_count=178}\n```\n43.99999999999997\n```\n:::\n:::\n\n\n## 고윳값과 고유벡터\n\n`eig` 함수는 정방 행렬의 [고윳값과 고유벡터](https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors)를 계산합니다:\n\n::: {.cell execution_count=179}\n``` {.python .cell-code}\neigenvalues, eigenvectors = linalg.eig(m3)\neigenvalues # λ\n```\n\n::: {.cell-output .cell-output-display execution_count=179}\n```\narray([42.26600592, -0.35798416, -2.90802176])\n```\n:::\n:::\n\n\n::: {.cell execution_count=180}\n``` {.python .cell-code}\neigenvectors # v\n```\n\n::: {.cell-output .cell-output-display execution_count=180}\n```\narray([[-0.08381182, -0.76283526, -0.18913107],\n       [-0.3075286 ,  0.64133975, -0.6853186 ],\n       [-0.94784057, -0.08225377,  0.70325518]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=181}\n``` {.python .cell-code}\nm3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0\n```\n\n::: {.cell-output .cell-output-display execution_count=181}\n```\narray([[ 6.21724894e-15,  1.66533454e-15, -3.10862447e-15],\n       [ 3.55271368e-15,  5.30131494e-15, -5.32907052e-15],\n       [ 3.55271368e-14,  5.38458167e-15, -9.76996262e-15]])\n```\n:::\n:::\n\n\n## 특잇값 분해\n\n`svd` 함수는 행렬을 입력으로 받아 그 행렬의 [특잇값 분해](https://en.wikipedia.org/wiki/Singular_value_decomposition)를 반환합니다:\n\n::: {.cell execution_count=182}\n``` {.python .cell-code}\nm4 = np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])\nm4\n```\n\n::: {.cell-output .cell-output-display execution_count=182}\n```\narray([[1, 0, 0, 0, 2],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=183}\n``` {.python .cell-code}\nU, S_diag, V = linalg.svd(m4)\nU\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.],\n       [ 0.,  0., -1.,  0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=184}\n``` {.python .cell-code}\nS_diag\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\narray([3.        , 2.23606798, 2.        , 0.        ])\n```\n:::\n:::\n\n\n`svd` 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다:\n\n::: {.cell execution_count=185}\n``` {.python .cell-code}\nS = np.zeros((4, 5))\nS[np.diag_indices(4)] = S_diag\nS  # Σ\n```\n\n::: {.cell-output .cell-output-display execution_count=185}\n```\narray([[3.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.        , 2.23606798, 0.        , 0.        , 0.        ],\n       [0.        , 0.        , 2.        , 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=186}\n``` {.python .cell-code}\nV\n```\n\n::: {.cell-output .cell-output-display execution_count=186}\n```\narray([[-0.        ,  0.        ,  1.        , -0.        ,  0.        ],\n       [ 0.4472136 ,  0.        ,  0.        ,  0.        ,  0.89442719],\n       [ 0.        , -1.        ,  0.        ,  0.        ,  0.        ],\n       [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ],\n       [-0.89442719,  0.        ,  0.        ,  0.        ,  0.4472136 ]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=187}\n``` {.python .cell-code}\nU.dot(S).dot(V) # U.Σ.V == m4\n```\n\n::: {.cell-output .cell-output-display execution_count=187}\n```\narray([[1., 0., 0., 0., 2.],\n       [0., 0., 3., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0.]])\n```\n:::\n:::\n\n\n## 대각원소와 대각합\n\n::: {.cell execution_count=188}\n``` {.python .cell-code}\nnp.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)\n```\n\n::: {.cell-output .cell-output-display execution_count=188}\n```\narray([ 1,  7, 31])\n```\n:::\n:::\n\n\n::: {.cell execution_count=189}\n``` {.python .cell-code}\nnp.trace(m3)  # np.diag(m3).sum()와 같습니다\n```\n\n::: {.cell-output .cell-output-display execution_count=189}\n```\n39\n```\n:::\n:::\n\n\n## 선형  방정식 풀기\n\n`solve` 함수는 다음과 같은 선형 방정식을 풉니다:\n\n* $2x + 6y = 6$\n* $5x + 3y = -9$\n\n::: {.cell execution_count=190}\n``` {.python .cell-code}\ncoeffs  = np.array([[2, 6], [5, 3]])\ndepvars = np.array([6, -9])\nsolution = linalg.solve(coeffs, depvars)\nsolution\n```\n\n::: {.cell-output .cell-output-display execution_count=190}\n```\narray([-3.,  2.])\n```\n:::\n:::\n\n\nsolution을 확인해 보죠:\n\n::: {.cell execution_count=191}\n``` {.python .cell-code}\ncoeffs.dot(solution), depvars  # 네 같네요\n```\n\n::: {.cell-output .cell-output-display execution_count=191}\n```\n(array([ 6., -9.]), array([ 6, -9]))\n```\n:::\n:::\n\n\n좋습니다! 다른 방식으로도 solution을 확인해 보죠:\n\n::: {.cell execution_count=192}\n``` {.python .cell-code}\nnp.allclose(coeffs.dot(solution), depvars)\n```\n\n::: {.cell-output .cell-output-display execution_count=192}\n```\nTrue\n```\n:::\n:::\n\n\n# 벡터화\n\n한 번에 하나씩 개별 배열 원소에 대해 연산을 실행하는 대신 배열 연산을 사용하면 훨씬 효율적인 코드를 만들 수 있습니다. 이를 벡터화라고 합니다. 이를 사용하여 넘파이의 최적화된 성능을 활용할 수 있습니다.\n\n예를 들어, $sin(xy/40.5)$ 식을 기반으로 768x1024 크기 배열을 생성하려고 합니다. 중첩 반복문 안에 파이썬의 math 함수를 사용하는 것은 **나쁜** 방법입니다:\n\n::: {.cell execution_count=193}\n``` {.python .cell-code}\nimport math\ndata = np.empty((768, 1024))\nfor y in range(768):\n    for x in range(1024):\n        data[y, x] = math.sin(x*y/40.5)  # 매우 비효율적입니다!\n```\n:::\n\n\n작동은 하지만 순수한 파이썬 코드로 반복문이 진행되기 때문에 아주 비효율적입니다. 이 알고리즘을 벡터화해 보죠. 먼저 넘파이 `meshgrid` 함수로 좌표 벡터를 사용해 행렬을 만듭니다.\n\n::: {.cell execution_count=194}\n``` {.python .cell-code}\nx_coords = np.arange(0, 1024)  # [0, 1, 2, ..., 1023]\ny_coords = np.arange(0, 768)   # [0, 1, 2, ..., 767]\nX, Y = np.meshgrid(x_coords, y_coords)\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\narray([[   0,    1,    2, ..., 1021, 1022, 1023],\n       [   0,    1,    2, ..., 1021, 1022, 1023],\n       [   0,    1,    2, ..., 1021, 1022, 1023],\n       ...,\n       [   0,    1,    2, ..., 1021, 1022, 1023],\n       [   0,    1,    2, ..., 1021, 1022, 1023],\n       [   0,    1,    2, ..., 1021, 1022, 1023]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=195}\n``` {.python .cell-code}\nY\n```\n\n::: {.cell-output .cell-output-display execution_count=195}\n```\narray([[  0,   0,   0, ...,   0,   0,   0],\n       [  1,   1,   1, ...,   1,   1,   1],\n       [  2,   2,   2, ...,   2,   2,   2],\n       ...,\n       [765, 765, 765, ..., 765, 765, 765],\n       [766, 766, 766, ..., 766, 766, 766],\n       [767, 767, 767, ..., 767, 767, 767]])\n```\n:::\n:::\n\n\n여기서 볼 수 있듯이 `X`와 `Y` 모두 768x1024 배열입니다. `X`에 있는 모든 값은 수평 좌표에 해당합니다. `Y`에 있는 모든 값은 수직 좌표에 해당합니다.\n\n이제 간단히 배열 연산을 사용해 계산할 수 있습니다:\n\n::: {.cell execution_count=196}\n``` {.python .cell-code}\ndata = np.sin(X*Y/40.5)\n```\n:::\n\n\n맷플롯립의 `imshow` 함수를 사용해 이 데이터를 그려보죠([matplotlib tutorial](tools_matplotlib.ipynb)을 참조하세요).\n\n::: {.cell execution_count=197}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfig = plt.figure(1, figsize=(7, 6))\nplt.imshow(data, cmap=cm.hot)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](week_1a_numpy_files/figure-html/cell-198-output-1.png){width=580 height=437}\n:::\n:::\n\n\n# 저장과 로딩\n\n넘파이는 `ndarray`를 바이너리 또는 텍스트 포맷으로 손쉽게 저장하고 로드할 수 있습니다.\n\n## 바이너리 `.npy` 포맷\n\n랜덤 배열을 만들고 저장해 보죠.\n\n::: {.cell execution_count=198}\n``` {.python .cell-code}\na = np.random.rand(2,3)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=198}\n```\narray([[0.6582337 , 0.24539013, 0.74569645],\n       [0.28844438, 0.60651066, 0.15930072]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=199}\n``` {.python .cell-code}\nnp.save(\"my_array\", a)\n```\n:::\n\n\n끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 `.npy`를 붙입니다. 파일 내용을 확인해 보겠습니다:\n\n::: {.cell execution_count=200}\n``` {.python .cell-code}\nwith open(\"my_array.npy\", \"rb\") as f:\n    content = f.read()\n\ncontent\n```\n\n::: {.cell-output .cell-output-display execution_count=200}\n```\nb\"\\x93NUMPY\\x01\\x00v\\x00{'descr': '<f8', 'fortran_order': False, 'shape': (2, 3), }                                                          \\n&63!@\\x10\\xe5?\\x98D\\x13\\x99\\xf1h\\xcf?W\\xe3\\xac\\xcd\\xbe\\xdc\\xe7?2\\xb0\\xafg\\xdfu\\xd2?@@\\xa1\\x0b\\x89h\\xe3?\\x10\\xa7\\xeaJ\\xf7c\\xc4?\"\n```\n:::\n:::\n\n\n이 파일을 넘파이 배열로 로드하려면 `load` 함수를 사용합니다:\n\n::: {.cell execution_count=201}\n``` {.python .cell-code}\na_loaded = np.load(\"my_array.npy\")\na_loaded\n```\n\n::: {.cell-output .cell-output-display execution_count=201}\n```\narray([[0.6582337 , 0.24539013, 0.74569645],\n       [0.28844438, 0.60651066, 0.15930072]])\n```\n:::\n:::\n\n\n## 텍스트 포맷\n\n배열을 텍스트 포맷으로 저장해 보죠:\n\n::: {.cell execution_count=202}\n``` {.python .cell-code}\nnp.savetxt(\"my_array.csv\", a)\n```\n:::\n\n\n파일 내용을 확인해 보겠습니다:\n\n::: {.cell execution_count=203}\n``` {.python .cell-code}\nwith open(\"my_array.csv\", \"rt\") as f:\n    print(f.read())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.582337044180277541e-01 2.453901288450068829e-01 7.456964509102402827e-01\n2.884443771897650111e-01 6.065106608530257404e-01 1.593007198146598746e-01\n\n```\n:::\n:::\n\n\n이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다:\n\n::: {.cell execution_count=204}\n``` {.python .cell-code}\nnp.savetxt(\"my_array.csv\", a, delimiter=\",\")\n```\n:::\n\n\n이 파일을 로드하려면 `loadtxt` 함수를 사용합니다:\n\n::: {.cell execution_count=205}\n``` {.python .cell-code}\na_loaded = np.loadtxt(\"my_array.csv\", delimiter=\",\")\na_loaded\n```\n\n::: {.cell-output .cell-output-display execution_count=205}\n```\narray([[0.6582337 , 0.24539013, 0.74569645],\n       [0.28844438, 0.60651066, 0.15930072]])\n```\n:::\n:::\n\n\n## 압축된 `.npz` 포맷\n\n여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다:\n\n::: {.cell execution_count=206}\n``` {.python .cell-code}\nb = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=206}\n```\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]], dtype=uint8)\n```\n:::\n:::\n\n\n::: {.cell execution_count=207}\n``` {.python .cell-code}\nnp.savez(\"my_arrays\", my_a=a, my_b=b)\n```\n:::\n\n\n파일 내용을 확인해 보죠. `.npz` 파일 확장자가 자동으로 추가되었습니다.\n\n::: {.cell execution_count=208}\n``` {.python .cell-code}\nwith open(\"my_arrays.npz\", \"rb\") as f:\n    content = f.read()\n\nrepr(content)[:180] + \"[...]\"\n```\n\n::: {.cell-output .cell-output-display execution_count=208}\n```\n'b\"PK\\\\x03\\\\x04\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x00l\\\\x94\\\\xe23\\\\xb0\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x14\\\\x00my_a.npy\\\\x01\\\\x00\\\\x10\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\[...]'\n```\n:::\n:::\n\n\n다음과 같이 이 파일을 로드할 수 있습니다:\n\n::: {.cell execution_count=209}\n``` {.python .cell-code}\nmy_arrays = np.load(\"my_arrays.npz\")\nmy_arrays\n```\n\n::: {.cell-output .cell-output-display execution_count=209}\n```\n<numpy.lib.npyio.NpzFile at 0x28d22d2beb0>\n```\n:::\n:::\n\n\n게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:\n\n::: {.cell execution_count=210}\n``` {.python .cell-code}\nmy_arrays.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=210}\n```\nKeysView(<numpy.lib.npyio.NpzFile object at 0x0000028D22D2BEB0>)\n```\n:::\n:::\n\n\n::: {.cell execution_count=211}\n``` {.python .cell-code}\nmy_arrays[\"my_a\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=211}\n```\narray([[0.6582337 , 0.24539013, 0.74569645],\n       [0.28844438, 0.60651066, 0.15930072]])\n```\n:::\n:::\n\n\n# 그 다음은?\n\n넘파이 기본 요소를 모두 배웠지만 훨씬 더 많은 기능이 있습니다. 이를 배우는 가장 좋은 방법은 넘파이를 직접 실습해 보고 훌륭한 [넘파이 문서](http://docs.scipy.org/doc/numpy/reference/index.html)에서 필요한 함수와 기능을 찾아 보세요.\n\n## Quiz.\n아래의 array를 사용해서 다음 퀴즈를 풀어봅시다.\n\n::: {.cell execution_count=212}\n``` {.python .cell-code}\nimport numpy as np\n\n# array_2d = np.arange(5,50,5).reshape(3,3)\narray_2d = np.array([[5, 10, 15],\n                     [20, 25, 30],\n                     [35, 40, 45]])\narray_2d\n```\n\n::: {.cell-output .cell-output-display execution_count=212}\n```\narray([[ 5, 10, 15],\n       [20, 25, 30],\n       [35, 40, 45]])\n```\n:::\n:::\n\n\n1. 2차원 배열 'array_2d'에서 첫 번째 행(row)의 모든 요소를 선택해 보세요.  \n    > 힌트: 인덱싱을 사용하여 첫 번째 행을 선택할 수 있습니다.\n\n::: {.cell execution_count=213}\n``` {.python .cell-code}\narray_2d[0,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=213}\n```\narray([ 5, 10, 15])\n```\n:::\n:::\n\n\n2. 2차원 배열 'array_2d'에서 두 번째 열(column)의 모든 요소를 선택해 보세요.  \n    > 힌트: 인덱싱과 슬라이싱을 사용하여 두 번째 열을 선택할 수 있습니다.\n\n::: {.cell execution_count=214}\n``` {.python .cell-code}\narray_2d[:,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=214}\n```\narray([10, 25, 40])\n```\n:::\n:::\n\n\n3. 2차원 배열 'array_2d'에서 다음 요소들을 선택해 보세요: 25, 30, 40, 45  \n    > 힌트: 팬시 인덱싱(fancy indexing)을 사용하여 여러 요소를 한 번에 선택할 수 있습니다.\n\n::: {.cell execution_count=215}\n``` {.python .cell-code}\narray_2d[(1,2),1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=215}\n```\narray([[25, 30],\n       [40, 45]])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "week_1a_numpy_files"
    ],
    "filters": [],
    "includes": {}
  }
}