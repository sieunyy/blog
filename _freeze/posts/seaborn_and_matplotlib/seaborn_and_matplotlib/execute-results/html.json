{
  "hash": "f1268db7e395d512265710a2888c6024",
  "result": {
    "markdown": "---\ntitle: Seaborn and Matplotlib\nauthor: Sieun Shim\ndate: '2023-04-25'\ncategories:\n  - code\ntoc: true\nimage: seaborn.jpg\n---\n\n> seaborn and matplotlib\n\n코드 출처 - 이제현님 블로그\n- https://jehyunlee.github.io/2020/09/30/Python-DS-34-seaborn_matplotlib/\n\n- 예제로 사용할 펭귄 데이터를 불러옵니다.\n- seaborn에 내장되어 있습니다.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 1.2 `Figure` and `Axes`\n- matplotlib으로 도화지figure를 깔고 축공간axes를 만듭니다.\n- 1 x 2 축공간을 구성합니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfig, axes = plt.subplots(ncols=2, figsize=(8,4))\n\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-3-output-1.png){width=758 height=373}\n:::\n:::\n\n\n### 1.3 plot with matplotlib\n- matplotlib 기능을 이용해서 산점도를 그립니다.\n    - x축은 부리 길이 bill length\n    - y축은 부리 위 아래 두께 bill depth\n    - 색상은 종species로 합니다.\n    - Adelie, Chinstrap, Gentoo이 있습니다.\n- 두 축공간 중 왼쪽에만 그립니다.\n\n컬러를 다르게 주기 위해 f-string 포맷을 사용했습니다.  \nf-string 포맷에 대한 설명은 https://blockdmask.tistory.com/429를 참고하세요.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\nspecies_u = penguins[\"species\"].unique()\n\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n# plt.show()\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-4-output-1.png){width=757 height=372}\n:::\n:::\n\n\n조금 더 간단히 그리는 방법  \nmatplotlib는 기본적으로 Categorical 변수를 color로 바로 사용하지 못함\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# We transform text categorical variables into numerical variables\npenguins[\"species_codes\"] = pd.Categorical(penguins[\"species\"]).codes\n\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\naxes[0].scatter(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", c=\"species_codes\", alpha=0.3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<matplotlib.collections.PathCollection at 0x26eb8e6be80>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-5-output-2.png){width=651 height=342}\n:::\n:::\n\n\n### 1.4 Plot with seaborn\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\nspecies_u = penguins[\"species\"].unique()\n\n# plot 0 : matplotlib\n\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n\n# plot 1 : seaborn\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-6-output-1.png){width=757 height=372}\n:::\n:::\n\n\n- 단 세 줄로 거의 동일한 그림이 나왔습니다.\n    - scatter plot의 점 크기만 살짝 작습니다.\n    - label의 투명도만 살짝 다릅니다.\n- seaborn 명령 scatterplot()을 그대로 사용했습니다.\n- x축과 y축 label도 바꾸었습니다.\n    - ax=axes[1] 인자에서 볼 수 있듯, 존재하는 axes에 그림만 얹었습니다.\n    - matplotlib 틀 + seaborn 그림이므로, matplotlib 명령이 모두 통합니다.\n\n### 1.5 matplotlib + seaborn & seaborn + matplotlib\n- matplotlib과 seaborn이 자유롭게 섞일 수 있습니다.\n    - matplotlib 산점도 위에 seaborn 추세선을 얹을 수 있고,\n    - seaborn 산점도 위에 matplotlib 중심점을 얹을 수 있습니다.\n- 파이썬 코드는 다음과 같습니다.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig, axes = plt.subplots(ncols=2, figsize=(8, 4))\n\nspecies_u = penguins[\"species\"].unique()\n\n# plot 0 : matplotlib + seaborn\nfor i, s in enumerate(species_u):\n    # matplotlib 산점도\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                   c=f\"C{i}\", label=s, alpha=0.3\n                  )\n                  \n    # seaborn 추세선\n    sns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=penguins.loc[penguins[\"species\"]==s], \n                scatter=False, ax=axes[0])\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n# plot 1 : seaborn + matplotlib\n# seaborn 산점도\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfor i, s in enumerate(species_u):\n    # matplotlib 중심점\n    axes[1].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   c=f\"C{i}\", alpha=1, marker=\"x\", s=100\n                  )\n\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-7-output-1.png){width=757 height=372}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# scatter plot with different colors each species\nsns.scatterplot(data=penguins, x='bill_length_mm', y='bill_depth_mm', hue='species')\n\n# add mean values for each species as X markers\nmean_values = penguins.groupby('species').mean().reset_index(drop=False)\nfor i, row in mean_values.iterrows():\n    plt.scatter(row['bill_length_mm'], row['bill_depth_mm'], marker='X', s=100, linewidths=2, edgecolors='black', c=f\"C{i}\")\n    #print(i)\n\n# set x and y axis labels\nplt.xlabel('Bill Length (mm)')\nplt.ylabel('Bill Depth (mm)')\n\n# show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-8-output-1.png){width=585 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# scatter plot with different colors for each species\nsns.scatterplot(data=penguins, x='bill_length_mm', y='bill_depth_mm', hue='species')\n\n# add mean values for each species as X markers\nmean_values = penguins.groupby('species').mean().reset_index()\nsns.scatterplot(data=mean_values, x='bill_length_mm', y='bill_depth_mm', marker='X', s=100, hue='species', edgecolor='black')\n#sns.scatterplot(data=mean_values, x='bill_length_mm', y='bill_depth_mm', marker='X', s=50, color='white', edgecolor='black')\n\n# set x and y axis labels\nplt.xlabel('Bill Length (mm)')\nplt.ylabel('Bill Depth (mm)')\n\n# show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-9-output-1.png){width=585 height=429}\n:::\n:::\n\n\n### 1.6 seaborn + seaborn + matplotlib\n- 안 될 이유가 없습니다.\n- seaborn `scatterplot` + seaborn `kdeplot` + matplotlib `text`입니다.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(6,5))\n\n# plot 0: scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"k\", data=penguins, alpha=0.3, ax=ax, legend=False)\n\n# plot 1: kde plot\nsns.kdeplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.5, ax=ax, legend=False)\n\n# text:\nspecies_u = penguins[\"species\"].unique()\nfor i, s in enumerate(species_u):\n    ax.text(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n            penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n            s = s, fontdict={\"fontsize\":14, \"fontweight\":\"bold\",\"color\":\"k\"}\n            )\n\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-10-output-1.png){width=565 height=468}\n:::\n:::\n\n\n### Quiz\n\nBill length를 10단위로 나눈 후, bill length에 따른 Bill depth의 bolxplot을 그려봅시다.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Bill length를 10으로 나누어서 새로운 열(column)을 추가합니다.\npenguins[\"bill_length_10\"] = (penguins[\"bill_length_mm\"] // 10) * 10\n\nsns.boxplot(x=\"bill_length_10\", y=\"bill_depth_mm\", data=penguins)\nsns.stripplot(x=\"bill_length_10\", y=\"bill_depth_mm\", data=penguins, color=\"black\", size=4)\n\nsns.set_style(\"whitegrid\")\n# sns.despine()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-11-output-1.png){width=582 height=427}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-12-output-1.png){width=582 height=427}\n:::\n:::\n\n\npd.cut을 이용한 방법\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# bill_length_mm을 구간별로 나누어서 범주형 열을 생성합니다.\npenguins[\"bill_length_group\"] = pd.cut(penguins[\"bill_length_mm\"],\n                                       bins=[0, 40, 50, 60],\n                                       labels=[\"0-40\", \"40-50\", \"50-60\"])\n\nsns.boxplot(x=\"bill_length_group\", y=\"bill_depth_mm\", data=penguins)\nsns.stripplot(x=\"bill_length_group\", y=\"bill_depth_mm\", data=penguins, color=\"black\", size=4)\n\nsns.set_style(\"whitegrid\")\nsns.despine()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-13-output-1.png){width=582 height=427}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# bill_length_mm을 구간별로 나누어서 범주형 열을 생성합니다.\npenguins[\"bill_length_group\"] = pd.cut(penguins[\"bill_length_mm\"],\n                                       bins=[0, 40, 50, 60],\n                                       labels=[\"0-40\", \"40-50\", \"50-60\"])\n\nsns.boxplot(x=\"bill_length_group\", y=\"bill_depth_mm\", hue=\"species\", data=penguins)\nsns.set_style(\"whitegrid\")\nsns.despine()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-14-output-1.png){width=582 height=427}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ng = sns.FacetGrid(penguins, col=\"species\", col_wrap=3, hue=\"species\")\ng.map(sns.scatterplot, \"bill_length_mm\", \"bill_depth_mm\")\n\nsns.set_style(\"whitegrid\")\nsns.despine()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-15-output-1.png){width=854 height=278}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ng = sns.FacetGrid(penguins, col=\"species\", col_wrap=4)\ng.map(sns.boxplot, \"bill_length_group\", \"bill_depth_mm\", order=[\"0-40\", \"40-50\", \"50-60\"])\ng.map(sns.stripplot, \"bill_length_group\", \"bill_depth_mm\", color=\"black\", size=4, order=[\"0-40\", \"40-50\", \"50-60\"])\n\nsns.set_style(\"whitegrid\")\nsns.despine()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](seaborn_and_matplotlib_files/figure-html/cell-16-output-1.png){width=868 height=278}\n:::\n:::\n\n\n",
    "supporting": [
      "seaborn_and_matplotlib_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}