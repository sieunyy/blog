{
  "hash": "4b88b2989f71341f7200b80cf5d80864",
  "result": {
    "markdown": "---\nlayout: single\ntitle:  \"pandas Code! (2)\"\ncategories: coding\ntag: [python, code, analysis]\ntoc: true\nauthor_profile: false\n---\n\n<table align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https://colab.research.google.com/github/rickiepark/handson-ml2/blob/master/tools_pandas.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />구글 코랩에서 실행하기</a>\n  </td>\n</table>\n\n# 설정\n\n먼저 `pandas`를 임포트합니다. 보통 `pd`로 임포트합니다:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n# 시간 다루기\n\n많은 데이터셋에 타임스탬프가 포함되어 있습니다. 판다스는 이런 데이터를 다루는데 뛰어납니다:\n* (2016Q3 같은) 기간과 (\"monthly\" 같은) 빈도를 표현할 수 있습니다.\n* 기간을 실제 타임스탬프로 변환하거나 그 반대로 변환할 수 있습니다.\n* 데이터를 리샘플링하고 원하는 방식으로 값을 모을 수 있습니다.\n* 시간대를 다룰 수 있습니다.\n\n## 시간 범위\n\n먼저 `pd.date_range()`를 사용해 시계열을 만들어 보죠. 이 함수는 2016년 10월 29일 5:30pm에서 시작하여 12시간마다 하나의 datetime을 담고 있는 `DatetimeIndex`를 반환합니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndates = pd.date_range('2016/10/29 5:30pm', periods=12, freq='H')\ndates\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npd.date_range('2020-10-07', '2020-10-20', freq='3D')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nDatetimeIndex(['2020-10-07', '2020-10-10', '2020-10-13', '2020-10-16',\n               '2020-10-19'],\n              dtype='datetime64[ns]', freq='3D')\n```\n:::\n:::\n\n\n이 `DatetimeIndex`를 `Series`의 인덱스로 사용할수 있습니다:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntemperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5]\ntemp_series = pd.Series(temperatures, dates)\ntemp_series\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n```\n:::\n:::\n\n\n이 시리즈를 그래프로 출력해 보죠:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\ntemp_series.plot(kind=\"bar\")\n\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](test2_files/figure-html/cell-6-output-1.png){width=558 height=540}\n:::\n:::\n\n\n## 리샘플링\n\n판다스는 매우 간단하게 시계열을 리샘플링할 수 있습니다. `resample()` 메서드를 호출하고 새로운 주기를 지정하면 됩니다:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntemp_series_freq_2H = temp_series.resample(\"2H\")\ntemp_series_freq_2H\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<pandas.core.resample.DatetimeIndexResampler object at 0x000001ED407C7EE0>\n```\n:::\n:::\n\n\n리샘플링 연산은 사실 지연된 연산입니다. (https://ko.wikipedia.org/wiki/%EB%8A%90%EA%B8%8B%ED%95%9C_%EA%B3%84%EC%82%B0%EB%B2%95) 그래서 `Series` 객체 대신 `DatetimeIndexResampler` 객체가 반환됩니다. 실제 리샘플링 연산을 수행하려면 `mean()` 같은 메서드를 호출할 수 있습니다. 이 메서드는 연속적인 시간 쌍에 대해 평균을 계산합니다:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntemp_series_freq_2H = temp_series_freq_2H.mean()\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntemp_series_freq_2H\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n```\n:::\n:::\n\n\n결과를 그래프로 출력해 보죠:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntemp_series_freq_2H.plot(kind=\"bar\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](test2_files/figure-html/cell-10-output-1.png){width=558 height=540}\n:::\n:::\n\n\n2시간 간격으로 어떻게 값이 수집되었는지 확인해 보세요. 예를 들어 6-8pm 간격을 보면 6:30pm에서 `5.1`이고 7:30pm에서 `6.1`입니다. 리샘플링 후에 `5.1`과 `6.1`의 평균인 `5.6` 하나를 얻었습니다. 평균말고 어떤 집계 함수(aggregation function)도 사용할 수 있습니다. 예를 들어 각 기간에서 최솟값을 찾을 수 있습니다:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntemp_series_freq_2H = temp_series.resample(\"2H\").mean()\ntemp_series_freq_2H\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n```\n:::\n:::\n\n\n또는 동일한 효과를 내는 `apply()` 메서드를 사용할 수 있습니다:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntemp_series_freq_2H = temp_series.resample(\"2H\").apply(np.min)\ntemp_series_freq_2H\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64\n```\n:::\n:::\n\n\n## 업샘플링과 보간\n\n다운샘플링의 예를 보았습니다. 하지만 업샘플링(즉, 빈도를 높입니다)도 할 수 있습니다. 하지만 데이터에 구멍을 만듭니다:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntemp_series_freq_15min = temp_series.resample(\"15Min\").mean()\ntemp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n```\n:::\n:::\n\n\n한가지 방법은 보간으로 사이를 채우는 것입니다. 이렇게 하려면 `interpolate()` 메서드를 호출합니다. 기본값은 선형 보간이지만 3차 보간(cubic interpolation) 같은 다른 방법을 선택할 수 있습니다: https://bskyvision.com/789\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntemp_series_freq_15min = temp_series.resample(\"15Min\").interpolate(method=\"cubic\")\ntemp_series_freq_15min.head(n=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n2016-10-29 17:30:00    4.400000\n2016-10-29 17:45:00    4.452911\n2016-10-29 18:00:00    4.605113\n2016-10-29 18:15:00    4.829758\n2016-10-29 18:30:00    5.100000\n2016-10-29 18:45:00    5.388992\n2016-10-29 19:00:00    5.669887\n2016-10-29 19:15:00    5.915839\n2016-10-29 19:30:00    6.100000\n2016-10-29 19:45:00    6.203621\nFreq: 15T, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntemp_series.plot(label=\"Period: 1 hour\")\ntemp_series_freq_15min.plot(label=\"Period: 15 minutes\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](test2_files/figure-html/cell-15-output-1.png){width=571 height=396}\n:::\n:::\n\n\n## 시간대\n\n기본적으로 datetime은 *단순*합니다. 시간대(timezone)을 고려하지 않죠. 따라서 2016-10-30 02:30는 파리나 뉴욕이나 2016년 10월 30일 2:30pm입니다. `tz_localize()` 메서드로 시간대를 고려한 datetime을 만들 수 있습니다:  https://www.timeanddate.com/time/map/\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ntemp_series\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntemp_series_ny = temp_series.tz_localize(\"America/New_York\")\ntemp_series_ny\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n2016-10-29 17:30:00-04:00    4.4\n2016-10-29 18:30:00-04:00    5.1\n2016-10-29 19:30:00-04:00    6.1\n2016-10-29 20:30:00-04:00    6.2\n2016-10-29 21:30:00-04:00    6.1\n2016-10-29 22:30:00-04:00    6.1\n2016-10-29 23:30:00-04:00    5.7\n2016-10-30 00:30:00-04:00    5.2\n2016-10-30 01:30:00-04:00    4.7\n2016-10-30 02:30:00-04:00    4.1\n2016-10-30 03:30:00-04:00    3.9\n2016-10-30 04:30:00-04:00    3.5\ndtype: float64\n```\n:::\n:::\n\n\n모든 datetime에 `-04:00`이 추가됩니다. 즉 모든 시간은 [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) - 4시간을 의미합니다.\n\n다음처럼 파리 시간대로 바꿀 수 있습니다:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntemp_series_paris = temp_series_ny.tz_convert(\"Europe/Paris\")\ntemp_series_paris\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n```\n:::\n:::\n\n\nUTC와의 차이가 `+02:00`에서 `+01:00`으로 바뀐 것을 알 수 있습니다. 이는 프랑스가 10월 30일 3am에 겨울 시간으로 바꾸기 때문입니다(2am으로 바뀝니다). 따라서 2:30am이 두 번 등장합니다! 시간대가 없는 표현으로 돌아가 보죠(시간대가 없이 지역 시간으로 매시간 로그를 기록하는 경우 이와 비슷할 것입니다):\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntemp_series_paris_naive = temp_series_paris.tz_localize(None)\ntemp_series_paris_naive\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n2016-10-29 23:30:00    4.4\n2016-10-30 00:30:00    5.1\n2016-10-30 01:30:00    6.1\n2016-10-30 02:30:00    6.2\n2016-10-30 02:30:00    6.1\n2016-10-30 03:30:00    6.1\n2016-10-30 04:30:00    5.7\n2016-10-30 05:30:00    5.2\n2016-10-30 06:30:00    4.7\n2016-10-30 07:30:00    4.1\n2016-10-30 08:30:00    3.9\n2016-10-30 09:30:00    3.5\ndtype: float64\n```\n:::\n:::\n\n\n이렇게 되면 `02:30`이 정말 애매합니다. 시간대가 없는 datetime을 파리 시간대로 바꿀 때 에러가 발생합니다:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntry:\n    temp_series_paris_naive.tz_localize(\"Europe/Paris\")\nexcept Exception as e:\n    print(type(e))\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pytz.exceptions.AmbiguousTimeError'>\nCannot infer dst time from 2016-10-30 02:30:00, try using the 'ambiguous' argument\n```\n:::\n:::\n\n\n다행히 `ambiguous` 매개변수를 사용하면 판다스가 타임스탬프의 순서를 기반으로 적절한 DST(일광 절약 시간제)를 추측합니다:\n\nhttps://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=tori-tours&logNo=221221361831\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntemp_series_paris_naive.tz_localize(\"Europe/Paris\", ambiguous=\"infer\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n```\n:::\n:::\n\n\n## 기간\n\n`pd.period_range()` 함수는 `DatetimeIndex`가 아니라 `PeriodIndex`를 반환합니다. 예를 들어 2016과 2017년의 전체 분기를 가져와 보죠:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nquarters = pd.period_range('2016Q1', periods=8, freq='Q')\nquarters\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n```\n:::\n:::\n\n\n`PeriodIndex`에 숫자 `N`을 추가하면 `PeriodIndex` 빈도의 `N` 배만큼 이동시킵니다:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nquarters + 3\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nPeriodIndex(['2016Q4', '2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1',\n             '2018Q2', '2018Q3'],\n            dtype='period[Q-DEC]')\n```\n:::\n:::\n\n\n`asfreq()` 메서드를 사용하면 `PeriodIndex`의 빈도를 바꿀 수 있습니다. 모든 기간이 늘어나거나 줄어듭니다. 예를 들어 분기 기간을 모두 월별 기간으로 바꾸어 보죠:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nquarters.asfreq(\"M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nPeriodIndex(['2016-03', '2016-06', '2016-09', '2016-12', '2017-03', '2017-06',\n             '2017-09', '2017-12'],\n            dtype='period[M]')\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nquarters\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n```\n:::\n:::\n\n\n기본적으로 `asfreq`는 각 기간의 끝에 맞춥니다. 기간의 시작에 맞추도록 변경할 수 있습니다:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nquarters.asfreq(\"M\", how=\"start\")\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nPeriodIndex(['2016-01', '2016-04', '2016-07', '2016-10', '2017-01', '2017-04',\n             '2017-07', '2017-10'],\n            dtype='period[M]')\n```\n:::\n:::\n\n\n간격을 늘릴 수도 있습니다:\npandas 공식 메뉴얼 참조: https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nquarters.asfreq(\"A\")\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nPeriodIndex(['2016', '2016', '2016', '2016', '2017', '2017', '2017', '2017'], dtype='period[A-DEC]')\n```\n:::\n:::\n\n\n물론 `PeriodIndex`로 `Series`를 만들 수 있습니다:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nquarterly_revenue = pd.Series([300, 320, 290, 390, 320, 360, 310, 410], index = quarters)\nquarterly_revenue\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nquarterly_revenue.plot(kind=\"line\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](test2_files/figure-html/cell-29-output-1.png){width=584 height=426}\n:::\n:::\n\n\n`to_timestamp`를 호출해서 기간을 타임스탬프로 변경할 수 있습니다. 기본적으로 기간의 첫 번째 날을 반환합니다. 하지만 `how`와 `freq`를 지정해서 기간의 마지막 시간을 얻을 수 있습니다:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nquarterly_revenue\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nlast_hours = quarterly_revenue.to_timestamp(how=\"end\", freq=\"H\")\nlast_hours\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n2016-03-31 23:59:59.999999999    300\n2016-06-30 23:59:59.999999999    320\n2016-09-30 23:59:59.999999999    290\n2016-12-31 23:59:59.999999999    390\n2017-03-31 23:59:59.999999999    320\n2017-06-30 23:59:59.999999999    360\n2017-09-30 23:59:59.999999999    310\n2017-12-31 23:59:59.999999999    410\ndtype: int64\n```\n:::\n:::\n\n\n`to_peroid`를 호출하면 다시 기간으로 돌아갑니다:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nlast_hours.to_period()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n```\n:::\n:::\n\n\n판다스는 여러 가지 시간 관련 함수를 많이 제공합니다. [온라인 문서](http://pandas.pydata.org/pandas-docs/stable/timeseries.html)를 확인해 보세요. 예를 하나 들면 2016년 매월 마지막 업무일의 9시를 얻는 방법은 다음과 같습니다:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nmonths_2022 = pd.period_range(\"2022\", periods=12, freq=\"M\")\none_day_after_last_days = months_2022.asfreq(\"D\") + 1\nlast_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay(n=1)\nlast_bdays.to_period(\"H\") + 9\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nPeriodIndex(['2022-01-31 09:00', '2022-02-28 09:00', '2022-03-31 09:00',\n             '2022-04-29 09:00', '2022-05-31 09:00', '2022-06-30 09:00',\n             '2022-07-29 09:00', '2022-08-31 09:00', '2022-09-30 09:00',\n             '2022-10-31 09:00', '2022-11-30 09:00', '2022-12-30 09:00'],\n            dtype='period[H]')\n```\n:::\n:::\n\n\n",
    "supporting": [
      "test2_files"
    ],
    "filters": [],
    "includes": {}
  }
}