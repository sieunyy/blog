---
title: "Numpy"
author: "Sieun Shim"
date: "2023-03-21"
categories: [code]
image: "numpy.jpg"
jupyter: python3
---

# "Numpy 기본"
> "numpy 기본 코드 실습(한글)"

- toc:true
- branch: master
- badges: true
- comments: true
- author: Jiho Yeo
- categories: [jupyter, python]

**도구 - 넘파이(NumPy)**

*넘파이(NumPy)는 파이썬의 과학 컴퓨팅을 위한 기본 라이브러리입니다. 넘파이의 핵심은 강력한 N-차원 배열 객체입니다. 또한 선형 대수, 푸리에(Fourier) 변환, 유사 난수 생성과 같은 유용한 함수들도 제공합니다."

<table align="left">
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/rickiepark/handson-ml2/blob/master/tools_numpy.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />구글 코랩에서 실행하기</a>
  </td>
</table>

   ⠀⠀⠀  

# 배열 생성

`numpy`를 임포트해 보죠. 대부분의 사람들이 `np`로 알리아싱하여 임포트합니다:

```{python}
#| id: cLHSwTL-e18X
#| id: cLHSwTL-e18X
import numpy as np
```

## `np.zeros`

`zeros` 함수는 0으로 채워진 배열을 만듭니다:

```{python}
#| id: _5-A5CIoe18Y
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 431, status: ok, timestamp: 1633324372322, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: _5-A5CIoe18Y
#| outputId: aec96a78-4c8f-4d0d-87a9-f1873044d189
np.zeros(5)
```

2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 $3 \times 4$ 크기의 행렬입니다:

```{python}
#| id: iS2ZVhqje18Y
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 421, status: ok, timestamp: 1633324377127, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: iS2ZVhqje18Y
#| outputId: 2f058107-6de9-4f5c-8a43-176b948e563f
np.zeros((3,4))
```

## 용어

* 넘파이에서 각 차원을 **축**(axis) 이라고 합니다
* 축의 개수를 **랭크**(rank) 라고 합니다.
    * 예를 들어, 위의 $3 \times 4$ 행렬은 랭크 2인 배열입니다(즉 2차원입니다).
    * 첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.
* 배열의 축 길이를 배열의 **크기**(shape)라고 합니다.
    * 예를 들어, 위 행렬의 크기는 `(3, 4)`입니다.
    * 랭크는 크기의 길이와 같습니다.
* 배열의 **사이즈**(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(가령, $3 \times 4=12$).

```{python}
#| id: g5Dy159He18Y
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 327, status: ok, timestamp: 1633410396422, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: g5Dy159He18Y
#| outputId: e41ffa56-23fd-46fc-8bd8-f420428de652
a = np.zeros((3,4))
a
```

```{python}
#| id: tSXp4dISe18Y
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 2, status: ok, timestamp: 1633410398522, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: tSXp4dISe18Y
#| outputId: e88d5ff1-2ebd-40a4-f59d-7e21d06f60dc
a.shape
```

```{python}
#| id: aMY1UjlTe18Y
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 328, status: ok, timestamp: 1633410415356, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: aMY1UjlTe18Y
#| outputId: 78e761e0-7ec2-448b-968c-b4288c11f0bd
a.ndim  # len(a.shape)와 같습니다
```

```{python}
#| id: FVI25cs6e18Z
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 318, status: ok, timestamp: 1633410422749, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: FVI25cs6e18Z
#| outputId: 0887d837-63e7-46ae-fd7b-125d84826e11
a.size
```

## N-차원 배열
임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 `(2,3,4)`인 3D 배열(랭크=3)입니다:

```{python}
#| id: olP3UVoVe18Z
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 337, status: ok, timestamp: 1633410592720, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: olP3UVoVe18Z
#| outputId: 1c1ef080-44ca-4c53-9086-15c19d8b694c
np.zeros((2,2,5))
```

## 배열 타입
넘파이 배열의 타입은 `ndarray`입니다:

```{python}
#| id: QO6hVeSze18Z
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 454, status: ok, timestamp: 1633324479666, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: QO6hVeSze18Z
#| outputId: 7709877a-ec3b-4d0f-daa9-92d98c2033ce
type(np.zeros((3,4)))
```

## `np.ones`
`ndarray`를 만들 수 있는 넘파이 함수가 많습니다.

다음은 1로 채워진 $3 \times 4$ 크기의 행렬입니다:

```{python}
#| id: n72gORzye18Z
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 779, status: ok, timestamp: 1633324492423, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: n72gORzye18Z
#| outputId: 95ab7176-1a8c-498f-feea-fba89092b7ff
np.ones((3,4))
```

## `np.full`
주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 `π`로 채워진 $3 \times 4$ 크기의 행렬입니다.

```{python}
#| id: YVzE5gANe18Z
#| id: YVzE5gANe18Z
#| outputId: e02e1c63-24eb-4e2b-91ba-da85281e801b
np.full((3,4), np.pi)
```

## `np.empty`
초기화되지 않은 $2 \times 3$ 크기의 배열을 만듭니다(배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다):

```{python}
#| id: LT_g08kte18a
#| id: LT_g08kte18a
#| outputId: 72f17e9f-22bc-4e5c-aa6c-08d15d8f5a50
#| scrolled: true
np.empty((2,3))
```

## np.array
`array` 함수는 파이썬 리스트를 사용하여 `ndarray`를 초기화합니다:

```{python}
#| id: qVLkDuC5e18a
#| id: qVLkDuC5e18a
#| outputId: 83226f2a-ed8c-4a0d-da21-eedb4a23874c
np.array([[1,2,3,4], [10, 20, 30, 40]])
```

## `np.arange`
파이썬의 기본 `range` 함수와 비슷한 넘파이 `arange` 함수를 사용하여 `ndarray`를 만들 수 있습니다:

```{python}
#| id: GNdq6rY1e18a
#| id: GNdq6rY1e18a
#| outputId: 6cb6f07c-52af-44c7-d41a-072458f621e3
#| scrolled: true
np.arange(1, 5)
```

부동 소수도 가능합니다:

```{python}
#| id: 1WExGjLfe18a
#| id: 1WExGjLfe18a
#| outputId: 0bd63be9-aeb8-443c-cf26-51c097226b53
np.arange(1.0, 5.0)
```

파이썬의 기본 `range` 함수처럼 건너 뛰는 정도를 지정할 수 있습니다:

```{python}
#| id: nqPAWSN8e18b
#| id: nqPAWSN8e18b
#| outputId: 58916f4f-38d3-44d0-a6b7-9ab9df05b62b
np.arange(1, 5, 0.5)
```

부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다:

```{python}
#| id: ZS_9tMhQe18b
#| id: ZS_9tMhQe18b
#| outputId: d8f753a3-2a20-453e-f69c-8d6c189e12a8
print(np.arange(0, 5/3, 1/3)) # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.
print(np.arange(0, 5/3, 0.333333333))
print(np.arange(0, 5/3, 0.333333334))
```

for loops를 사용하지 않고 전체 array에 대한 연산 수행이 가능합니다.  
평균적으로 Numpy-based 알고리즘은 10~100배 정도 속도가 더 빠르고 적은 메모리를 사용합니다.

```{python}
my_arr = np.arange(1000000)
my_list = list(range(1000000))

%time for _ in range(10): my_arr2 = my_arr * 2
%time for _ in range(10): my_list2 = [x * 2 for x in my_list]
```

For loop를 돌릴 때의 속도 비교

```{python}
size = 10
for x in range(size): x ** 2
```

```{python}
import sys

size = 10

%timeit for x in range(size): x ** 2
# out: 10 loops, best of 3: 136 ms per loop

# avoid this
%timeit for x in np.arange(size): x ** 2
# out: 1 loops, best of 3: 1.16 s per loop

# use this
%timeit np.arange(size) ** 2
# out: 100 loops, best of 3: 19.5 ms per loop
```

## `np.linspace`
이런 이유로 부동 소수를 사용할 땐 `arange` 대신에 `linspace` 함수를 사용하는 것이 좋습니다. `linspace` 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다(`arange`와는 다르게 최댓값이 **포함**됩니다):

```{python}
#| id: JDcNhQ-_e18b
#| id: JDcNhQ-_e18b
#| outputId: eb2865c7-c39e-4095-d500-e237f83b7c92
print(np.linspace(0, 5/3, 6))
```

## `np.rand`와 `np.randn`
넘파이의 `random` 모듈에는 `ndarray`를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다.
예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 $3 \times 4$ 행렬을 초기화합니다:

```{python}
#| id: J4Mv5Dxke18b
#| id: J4Mv5Dxke18b
#| outputId: 5212a761-a650-4fff-fad3-fe639639c552
np.random.rand(3,4)
```

다음은 평균이 0이고 분산이 1인 일변량 [정규 분포](https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%EB%B6%84%ED%8F%AC)(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 $3 \times 4$ 행렬입니다:

```{python}
#| id: RMK3OjKXe18c
#| id: RMK3OjKXe18c
#| outputId: 4a7a6149-d80d-44de-b991-c3b174811822
np.random.randn(3,4)
```

이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다(더 자세한 것은 [맷플롯립 튜토리얼](tools_matplotlib.ipynb)을 참고하세요):

```{python}
#| id: npjk6A9oe18c
#| id: npjk6A9oe18c
#| scrolled: false
%matplotlib inline
import matplotlib.pyplot as plt
```

```{python}
#| id: JSc7Zphfe18c
#| colab: {base_uri: 'https://localhost:8080/', height: 295}
#| executionInfo: {elapsed: 503, status: ok, timestamp: 1633325626998, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: JSc7Zphfe18c
#| outputId: df9dd86c-41d4-41c9-b249-f90e905cd3a7
plt.hist(np.random.rand(100000), density=True, bins=100, histtype="step", color="blue", label="rand")
plt.hist(np.random.randn(100000), density=True, bins=100, histtype="step", color="red", label="randn")
plt.axis([-2.5, 2.5, 0, 1.1])
plt.legend(loc = "upper left")
plt.title("Random distributions")
plt.xlabel("Value")
plt.ylabel("Density")
plt.show()
```

## np.fromfunction
함수를 사용하여 `ndarray`를 초기화할 수도 있습니다:

```{python}
#| id: 1PPxhCvKe18c
#| id: 1PPxhCvKe18c
#| outputId: 4520cb28-963e-4d1a-db31-01e02f59ca76
def my_function(z, y, x):
    return x + 10 * y + 100 * z

np.fromfunction(my_function, (3, 2, 10))
```

넘파이는 먼저 크기가 `(3, 2, 10)`인 세 개의 `ndarray`(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, `z` 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다:

    [[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
      [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]
    
     [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
      [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]
    
     [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]
      [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]

위의 식 `x + 10 * y + 100 * z`에서 `x`, `y`, `z`는 사실 `ndarray`입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 `my_function`이 원소마다 호출되는 것이 아니고 딱 **한 번** 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다.

# 배열 데이터
## `dtype`
넘파이의 `ndarray`는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. `dtype` 속성으로 쉽게 데이터 타입을 확인할 수 있습니다:

```{python}
#| id: BntmDU3me18c
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 444, status: ok, timestamp: 1633325655719, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: BntmDU3me18c
#| outputId: a6d39949-ff4a-404f-9c5d-5156f0e8be88
#| scrolled: true
c = np.arange(1, 5)
print(c.dtype, c)
```

```{python}
#| id: V0qVWqW1e18d
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 4, status: ok, timestamp: 1633325658007, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: V0qVWqW1e18d
#| outputId: f0233337-0c11-4579-9a77-0559015c9d62
c = np.arange(1.0, 5.0)
print(c.dtype, c)
```

넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 `dtype` 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다:

```{python}
#| id: ELWDvG9Ae18d
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 426, status: ok, timestamp: 1633325671160, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: ELWDvG9Ae18d
#| outputId: 5fa42da8-c6d7-4ea9-b2a9-18cd4c630f2d
d = np.arange(1, 5, dtype=np.complex64)
print(d.dtype, d)
```

가능한 데이터 타입은 `int8`, `int16`, `int32`, `int64`, `uint8`|`16`|`32`|`64`, `float16`|`32`|`64`, `complex64`|`128`가 있습니다. 전체 리스트는 [온라인 문서](http://docs.scipy.org/doc/numpy/user/basics.types.html)를 참고하세요.

## `itemsize`
`itemsize` 속성은 각 아이템의 크기(바이트)를 반환합니다:

```{python}
#| id: xOtAWh7Ee18d
#| id: xOtAWh7Ee18d
#| outputId: e62be970-e82f-43d2-efce-17f5ccb56cf1
e = np.arange(1, 5, dtype=np.complex64)
e.itemsize
```

## `data` 버퍼
배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. `data` 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).

```{python}
#| id: Xy4Uwjcze18e
#| id: Xy4Uwjcze18e
#| outputId: 30adfdc5-ae0d-421e-80d2-6745d53c78dc
#| scrolled: false
f = np.array([[1,2],[1000, 2000]], dtype=np.int32)
f.data
```

파이썬 2에서는 `f.data`가 버퍼이고 파이썬 3에서는 memoryview입니다.

```{python}
#| id: eDJLlHISe18e
#| id: eDJLlHISe18e
#| outputId: be1942c3-a904-47e6-f9e1-245139eec99f
if (hasattr(f.data, "tobytes")):
    data_bytes = f.data.tobytes() # python 3
else:
    data_bytes = memoryview(f.data).tobytes() # python 2

data_bytes
```

여러 개의 `ndarray`가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다.

# 배열 크기 변경

## 자신을 변경

`ndarray`의 `shape` 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.

```{python}
#| id: tUusVP4Ee18e
#| id: tUusVP4Ee18e
#| outputId: d871639e-ad6e-4218-8413-4a7d18bf968b
g = np.arange(24)
print(g)
print("랭크:", g.ndim)
```

```{python}
#| id: DGI6k-ePe18e
#| id: DGI6k-ePe18e
#| outputId: 28447575-824f-4b5a-c0c0-e8fe9fabbf42
g.shape = (6, 4)
print(g)
print("랭크:", g.ndim)
```

```{python}
#| id: ZYYm1gVUe18e
#| id: ZYYm1gVUe18e
#| outputId: adb8faea-34ee-4b89-c459-b126556b37b2
#| scrolled: true
g.shape = (2, 3, 4)
print(g)
print("랭크:", g.ndim)
```

## `reshape`

`reshape` 함수는 동일한 데이터를 가리키는 새로운 `ndarray` 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.

```{python}
#| id: eY-c8dr0e18f
#| id: eY-c8dr0e18f
#| outputId: d6ef5ee8-7598-4959-a54f-dea4032f7e25
#| scrolled: true
g2 = g.reshape(4,6)
print(g2)
print("랭크:", g2.ndim)
```

```{python}
g[0,0,0] = 10
g2
```

행 1, 열 2의 원소를 999로 설정합니다(인덱싱 방식은 아래를 참고하세요).

```{python}
#| id: q9pTNitre18f
#| id: q9pTNitre18f
#| outputId: b6406ebb-49f1-4593-be6f-da52227ee1e0
g2[1, 2] = 999
g2
```

이에 상응하는 `g`의 원소도 수정됩니다.

```{python}
#| id: FB8GNr99e18f
#| id: FB8GNr99e18f
#| outputId: 84d77aad-f774-4478-f314-59eabe5a8d27
g
```

완전히 다른 공간에 값만 같게 복사를 하고 싶다면 `copy`를 사용.  
이렇게 할 경우 두 객체는 독립적인 객체로 존재함

```{python}
g2 = g.copy()
g2
```

## `ravel`

마지막으로 `ravel` 함수는 동일한 데이터를 가리키는 새로운 1차원 `ndarray`를 반환합니다:

```{python}
#| id: jfGnxvIhe18f
#| id: jfGnxvIhe18f
#| outputId: c53be7f6-8225-466e-8dee-eeef7eb1be3c
g.ravel()
```

# 산술 연산

일반적인 산술 연산자(`+`, `-`, `*`, `/`, `//`, `**` 등)는 모두 `ndarray`와 사용할 수 있습니다. 이 연산자는 원소별로 적용됩니다:

```{python}
#| id: wTVKZhAme18f
#| id: wTVKZhAme18f
#| outputId: 81bc44c0-dea0-4022-dd5d-9164bf246997
#| scrolled: false
a = np.array([14, 23, 32, 41])
b = np.array([5,  4,  3,  2])
print("a + b  =", a + b)
print("a - b  =", a - b)
print("a * b  =", a * b)
print("a / b  =", a / b)
print("a // b  =", a // b) # 몫
print("a % b  =", a % b) # 나머지
print("a ** b =", a ** b)
```

```{python}
5 ** 3
```

여기 곱셈은 행렬 곱셈이 아닙니다. 행렬 연산은 아래에서 설명합니다.

배열의 크기는 같아야 합니다. 그렇지 않으면 넘파이가 브로드캐스팅 규칙을 적용합니다.

# 브로드캐스팅

일반적으로 넘파이는 동일한 크기의 배열을 기대합니다. 그렇지 않은 상황에는 브로드캐시틍 규칙을 적용합니다:

## 규칙 1

배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.

```{python}
#| id: 33JIuE1Ve18g
#| id: 33JIuE1Ve18g
#| outputId: 51db0f5f-2476-4525-eebb-c2e1918b977f
h = np.arange(5).reshape(1, 1, 5)
h
```

여기에 `(1,1,5)` 크기의 3D 배열에 `(5,)` 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!

```{python}
#| id: Yfzln3pbe18g
#| id: Yfzln3pbe18g
#| outputId: fa396519-4eab-4a69-fc7c-5c5a465fa137
h + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]
```

## 규칙 2

특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.

```{python}
#| id: GwqhHlP9e18g
#| id: GwqhHlP9e18g
#| outputId: 35bb7e32-f3e9-49cb-c127-259e783071ab
k = np.arange(6).reshape(2, 3)
k
```

`(2,3)` 크기의 2D `ndarray`에 `(2,1)` 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다:

```{python}
#| id: 4bU_7EtKe18g
#| id: 4bU_7EtKe18g
#| outputId: ed8b04f1-ba93-4ea1-8210-1e5aed1ab121
k + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]
```

규칙 1과 2를 합치면 다음과 같이 동작합니다:  
`(2,3)` 크기의 `ndarray`에 `(3,)` 크기의 `ndarray` 더하기

```{python}
k
```

```{python}
#| id: 9EM-Dfake18h
#| id: 9EM-Dfake18h
#| outputId: 9e66a1e4-36d3-44d6-88e8-8c95796a302e
k + [100, 200, 300]  # 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]
```

```{python}
test = np.array([100, 200, 300])
test.shape
test
```

```{python}
# step 1
test = test.reshape(1,3)
test
```

```{python}
# step 2
np.vstack((test,test))
```

```{python}
# step 3
np.concatenate((test,test), axis=0)
```

또 매우 간단히 다음처럼 해도 됩니다:

```{python}
#| id: 3TIhMyJMe18h
#| id: 3TIhMyJMe18h
#| outputId: ad1e05f2-4931-4b71-a2b2-bcb872487970
k + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]
```

## 규칙 3

규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.

```{python}
k
```

```{python}
#| id: Q6gMlLdTe18h
#| id: Q6gMlLdTe18h
#| outputId: 35d328c0-237a-4401-9465-8f4e8895a340
try:
    k + [33, 44]
except ValueError as e:
    print(e)
```

브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 [온라인 문서](https://docs.scipy.org/doc/numpy-dev/user/basics.broadcasting.html)를 참고하세요.

```{python}
a = np.array([[0.0],[10.0],[20.0],[30.0]])
a
```

```{python}
a = np.array([0.0, 10.0, 20.0, 30.0])
b = np.array([1.0, 2.0, 3.0])
a[:, np.newaxis] + b
```

## 업캐스팅

`dtype`이 다른 배열을 합칠 때 넘파이는 (실제 값에 상관없이) 모든 값을 다룰 수 있는 타입으로 업캐스팅합니다.

```{python}
#| id: '-QpkGg3Re18h'
#| id: '-QpkGg3Re18h'
#| outputId: 3c80e710-b5c8-4ff0-b904-fa959224f6dc
k1 = np.arange(0, 5, dtype=np.uint8)
print(k1.dtype, k1)
```

```{python}
#| id: 7bv6CdyTe18h
#| id: 7bv6CdyTe18h
#| outputId: 997402a6-a5ff-4a38-a24f-8a49bfe19b9f
k2 = k1 + np.array([5, 6, 7, 8, 9], dtype=np.int8)
print(k2.dtype, k2)
```

모든 `int8`과 `uint8` 값(-128에서 255까지)을 표현하기 위해 `int16`이 필요합니다. 이 코드에서는 `uint8`이면 충분하지만 업캐스팅되었습니다.

```{python}
#| id: RbLcnjDhe18i
#| id: RbLcnjDhe18i
#| outputId: fb5e63a2-5b57-407a-f082-c66bd6405525
k3 = k1 + 1.5
print(k3.dtype, k3)
```

# 조건 연산자

조건 연산자도 원소별로 적용됩니다:

```{python}
#| id: _2De9VRje18i
#| id: _2De9VRje18i
#| outputId: 0546d38b-d344-404c-e56f-4a4728c6ecad
m = np.array([20, -5, 30, 40])
m < [15, 16, 35, 36]
```

브로드캐스팅을 사용합니다:

```{python}
#| id: FheSPsIIe18i
#| id: FheSPsIIe18i
#| outputId: 7946709f-be50-40d5-f7a4-a51de862d1a0
m < 25  # m < [25, 25, 25, 25] 와 동일
```

불리언 인덱싱과 함께 사용하면 아주 유용합니다(아래에서 설명하겠습니다).

```{python}
#| id: NY5Qm7jne18i
#| id: NY5Qm7jne18i
#| outputId: 96c66f25-da2e-4e4f-8f34-8042bb730624
m[m < 25]
```

# 수학 함수와 통계 함수

`ndarray`에서 사용할 수 있는 수학 함수와 통계 함수가 많습니다.

## `ndarray` 메서드

일부 함수는 `ndarray` 메서드로 제공됩니다. 예를 들면:

```{python}
#| id: LIix_Jl6e18j
#| id: LIix_Jl6e18j
#| outputId: 78a268db-f453-4f4e-e7e3-899603d5837f
a = np.array([[-2.5, 3.1, 7], [10, 11, 12]])
print(a)
print("평균 =", a.mean()) # 축에 따라서 평균 구하고 싶으면 axis=0 1 2
```

이 명령은 크기에 상관없이 `ndarray`에 있는 모든 원소의 평균을 계산합니다.

다음은 유용한 `ndarray` 메서드입니다:

```{python}
#| id: _-kMH4Rue18j
#| id: _-kMH4Rue18j
#| outputId: d281ca87-22ec-4e3f-80f7-814df264f4c5
for func in (a.min, a.max, a.sum, a.prod, a.std, a.var):
    print(func.__name__, "=", func())
```

이 함수들은 선택적으로 매개변수 `axis`를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면:

```{python}
#| id: 3in-Q2mLe18j
#| id: 3in-Q2mLe18j
#| outputId: d37c2d4b-21bf-4df9-f91c-43c5a7e56aa1
c = np.arange(24).reshape(2,3,4)
c
```

```{python}
#| id: F_AYCAo1e18j
#| id: F_AYCAo1e18j
#| outputId: 501ae060-7889-44ad-d447-ca70d73671f6
c.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열
```

```{python}
#| id: SRf1rNPye18j
#| id: SRf1rNPye18j
#| outputId: 09e9394f-a745-4539-9ca5-c0d1b3f85e46
c.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열
```

```{python}
c.sum(axis=2) # 세 번째 축을 따라 더함, 결과는 2x3 배열
```

여러 축에 대해서 더할 수도 있습니다:

```{python}
c
```

```{python}
#| id: 9Qiv59VYe18k
#| id: 9Qiv59VYe18k
#| outputId: 9c915533-f5f6-4014-cb95-7cf9a914f181
c.sum(axis=(0,2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열
```

```{python}
#| id: odwrqqGse18k
#| id: odwrqqGse18k
#| outputId: dfa7489b-c662-4191-8621-d8c69610e6e4
0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23
```

## 일반 함수

넘파이는 일반 함수(universal function) 또는 **ufunc**라고 부르는 원소별 함수를 제공합니다. 예를 들면 `square` 함수는 원본 `ndarray`를 복사하여 각 원소를 제곱한 새로운 `ndarray` 객체를 반환합니다:

```{python}
#| id: zV_XOyCGe18k
#| id: zV_XOyCGe18k
#| outputId: fe881a00-5bea-4830-c0d3-2a513d594908
a = np.array([[-2.5, 3.1, 7], [10, 11, 12]])
np.square(a)
```

다음은 유용한 단항 일반 함수들입니다:

```{python}
#| id: pLVfUQlee18k
#| id: pLVfUQlee18k
#| outputId: 9251ff04-934e-4f1e-f8e6-41f9e7629d8c
print("원본 ndarray")
print(a)
for func in (np.abs, np.sqrt, np.exp, np.log, np.sign, np.ceil, np.modf, np.isnan, np.cos):
    print("\n", func.__name__)
    print(func(a))
```

## 이항 일반 함수

두 개의 `ndarray`에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다:

```{python}
#| id: l27etEMve18k
#| id: l27etEMve18k
#| outputId: 00c6fd50-49e7-4012-c814-fee289631bea
a = np.array([1, -2, 3, 4])
b = np.array([2, 8, -1, 7])
np.add(a, b)  # a + b 와 동일
```

```{python}
#| id: HCIGD_dOe18l
#| id: HCIGD_dOe18l
#| outputId: ff8b3dee-1717-4a51-c059-e028845c1f45
np.greater(a, b)  # a > b 와 동일
```

```{python}
#| id: n-Q9AFLye18l
#| id: n-Q9AFLye18l
#| outputId: 6cbce538-05ef-414c-c83d-af0f7d77d8e1
np.maximum(a, b)
```

```{python}
#| id: iY8GnA1qe18l
#| id: iY8GnA1qe18l
#| outputId: 266a7127-8f76-455f-8abc-3efc9d4c05a5
np.copysign(a, b)
```

# 배열 인덱싱 ★

## 1차원 배열

1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다:

```{python}
#| id: 7WPXxqVAe18l
#| id: 7WPXxqVAe18l
#| outputId: 16e9e96d-6c49-43e1-a7e3-68043b91576e
a = np.array([1, 5, 3, 19, 13, 7, 3])
a[3]
```

```{python}
#| id: KHFwjJboe18l
#| id: KHFwjJboe18l
#| outputId: e14765e6-b642-48cc-82f8-e4de880d5c6f
a[2:5]
```

```{python}
#| id: m00dyOz4e18l
#| id: m00dyOz4e18l
#| outputId: 5064d90d-d1d0-4cfc-d9c1-bce410032d45
a[2:-1]
```

```{python}
#| id: 6r4_FOPde18l
#| id: 6r4_FOPde18l
#| outputId: 4ce2d3b8-8409-4bd1-85b6-dc23abf9c605
a[:2]
```

```{python}
#| id: tik9SCLte18l
#| id: tik9SCLte18l
#| outputId: 422ac250-c82c-4daf-dc00-3b36330d97df
a[2::2]
```

```{python}
#| id: BZ-T87vOe18m
#| id: BZ-T87vOe18m
#| outputId: 5e4c6c40-8ac2-4de5-db80-ef948010bb8f
a[::-1]
```

물론 원소를 수정할 수 있죠:

```{python}
#| id: vZDX4AjHe18m
#| id: vZDX4AjHe18m
#| outputId: 3563fedc-683e-4090-c66f-e8d0d3a9da64
a[3]=999
a
```

슬라이싱을 사용해 `ndarray`를 수정할 수 있습니다:

```{python}
#| id: aNJvUbxce18m
#| id: aNJvUbxce18m
#| outputId: 1a3d3da0-eeb9-4310-bf12-74fad4432e37
a[2:5] = [997, 998, 999]
a
```

## 보통의 파이썬 배열과 차이점

보통의 파이썬 배열과 대조적으로 `ndarray` 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.

```{python}
a = np.array([1, 5, 3, 19, 13, 7, 3])
a
```

```{python}
#| id: tFSrPtaMe18m
#| id: tFSrPtaMe18m
#| outputId: bc23bb17-aeb6-4a0d-e3ed-e110e0897939
a[2:5] = -1
a
```

List는 브로드캐스팅으로 할당이 안됨

```{python}
b = [1, 5, 3, 19, 13, 7, 3]
#b[2:5] = -1
```

또한 이런 식으로 `ndarray` 크기를 늘리거나 줄일 수 없습니다:

```{python}
#| id: 32c-sDzBe18m
#| id: 32c-sDzBe18m
#| outputId: bf19e35a-8626-4906-a071-454e073751e7
#| scrolled: false
try:
    a[2:5] = [1,2,3,4,5,6]  # 너무 길어요
except ValueError as e:
    print(e)
```

원소를 삭제할 수도 없습니다:

```{python}
#| id: lk1Zgme_e18n
#| id: lk1Zgme_e18n
#| outputId: 74dfa441-83dd-4baf-8ad8-6c7cbac4c9f6
try:
    del a[2:5]
except ValueError as e:
    print(e)
```

List에서는 삭제가 가능

```{python}
b = [1, 5, 3, 19, 13, 7, 3]
del b[2:5]
b
```

중요한 점은 `ndarray`의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 `ndarray`가 수정됩니다!

```{python}
#| id: yBDgH25-e18n
#| id: yBDgH25-e18n
#| outputId: 17888b83-8342-4303-bbe1-49af75cb7ca3
a_slice = a[2:6]
a_slice[1] = 1000
a  # 원본 배열이 수정됩니다!
```

```{python}
#| id: B4dpMTBje18n
#| id: B4dpMTBje18n
#| outputId: 19c0deb3-12a7-40e8-815d-86e4db026aae
a[3] = 2000
a_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다!
```

데이터를 복사하려면 `copy` 메서드를 사용해야 합니다:

```{python}
#| id: 7FgDTA6Xe18n
#| id: 7FgDTA6Xe18n
#| outputId: 4d705b67-9553-4c8d-90ec-5b308a4ddd72
another_slice = a[2:6].copy()
another_slice[1] = 3000
a  # 원본 배열이 수정되지 않습니다.
```

```{python}
#| id: upX5iWIee18n
#| id: upX5iWIee18n
#| outputId: f83b75bb-699f-4ac3-e320-b09fdd22c55f
a[3] = 4000
another_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다.
```

## 다차원 배열

다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:

```{python}
#| id: aAHgLjTme18o
#| id: aAHgLjTme18o
#| outputId: e39742bd-6dda-4d63-c15a-278eed212274
b = np.arange(48).reshape(4, 12)
b
```

```{python}
#| id: 2lIRE6dGe18o
#| id: 2lIRE6dGe18o
#| outputId: 833aaeef-0b6c-4921-afff-51370d85fb19
b[1, 2]  # 행 1, 열 2
```

```{python}
#| id: KZ3AY0BJe18o
#| id: KZ3AY0BJe18o
#| outputId: 64962f41-214f-41f1-8426-0a4c7a0b3f30
b[1, :]  # 행 1, 모든 열
```

```{python}
#| id: I5d9TK93e18o
#| id: I5d9TK93e18o
#| outputId: b98f8dfa-e307-4125-d23d-44941d49e7e0
b[:, 1]  # 모든 행, 열 1
```

**주의**: 다음 두 표현에는 미묘한 차이가 있습니다: 

```{python}
#| id: QlhhxNp8e18o
#| id: QlhhxNp8e18o
#| outputId: 00a6aba1-8566-4768-c2d6-8cc43fd65aea
#| scrolled: true
b[1, :]
```

```{python}
b[1, :].shape
```

```{python}
#| id: s5s8uM2ge18o
#| id: s5s8uM2ge18o
#| outputId: ba0a4654-7a98-4504-e90d-df6a46767c92
b[1:2, :]
```

```{python}
b[1:2, :].shape
```

첫 번째 표현식은 `(12,)` 크기인 1D 배열로 행이 하나입니다. 두 번째는 `(1, 12)` 크기인 2D 배열로 같은 행을 반환합니다.

## 팬시 인덱싱(Fancy indexing)

관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.

```{python}
b
```

```{python}
#| id: tYJcpYdRe18p
#| id: tYJcpYdRe18p
#| outputId: df0a6cc1-98f2-4218-f6da-1c998e6c29bf
#| scrolled: true
b[(0,2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지
```

```{python}
#| id: BKXr4leXe18p
#| id: BKXr4leXe18p
#| outputId: 4affd0e7-becc-439d-e19f-fea5e3851897
b[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)
```

```{python}
b[(2,3), 0:2] # b[2:,0:2]
```

여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D `ndarray`를 반환됩니다.

```{python}
b
```

```{python}
#| id: '-uREynwFe18p'
#| id: '-uREynwFe18p'
#| outputId: 85292774-dc6e-4b94-adac-84512b222bd5
b[(-1, 2, -1, 2), (5, 9, 1, 9)]  # returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)
```

Quiz. 아래의 array를 사용해서 다음 퀴즈를 풀어봅시다.

```{python}
import numpy as np

array_2d = np.array([[5, 10, 15],
                     [20, 25, 30],
                     [35, 40, 45]]) # np.arange(5,50,5).reshape(3,3)
array_2d
```

1. 2차원 배열 'array_2d'에서 첫 번째 행(row)의 모든 요소를 선택해 보세요.  
    >힌트: 인덱싱을 사용하여 첫 번째 행을 선택할 수 있습니다.

```{python}
array_2d[0,:]
```

2. 2차원 배열 'array_2d'에서 두 번째 열(column)의 모든 요소를 선택해 보세요.  
    >힌트: 인덱싱과 슬라이싱을 사용하여 두 번째 열을 선택할 수 있습니다.

```{python}
array_2d[:,1]
```

3. 2차원 배열 'array_2d'에서 다음 요소들을 선택해 보세요: 25, 30, 40, 45  
    >힌트: 팬시 인덱싱(fancy indexing)을 사용하여 여러 요소를 한 번에 선택할 수 있습니다.

```{python}
array_2d[(1,2),1:3]
```

## 고차원

고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다:

```{python}
#| id: ZTnnUVz5e18p
#| id: ZTnnUVz5e18p
#| outputId: 053bb96f-ba56-46fe-beb7-694cb8f281e1
c = b.reshape(4,2,6)
c
```

```{python}
#| id: Y4DKvZhLe18p
#| id: Y4DKvZhLe18p
#| outputId: 95c32c48-ae97-4a9f-b628-f8e8fc9510fd
c[2, 1, 4]  # 행렬 2, 행 1, 열 4
```

```{python}
#| id: 1mfj_5whe18p
#| id: 1mfj_5whe18p
#| outputId: 790cb87a-5f85-4ba7-8a9a-897755f95e4f
c[2, :, 3]  # 행렬 2, 모든 행, 열 3
```

어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:

```{python}
#| id: TMowyixXe18q
#| id: TMowyixXe18q
#| outputId: 5046e5ce-16b3-4152-f90b-97763961de17
c[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.
```

## 생략 부호 (`...`)

생략 부호(`...`)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.

```{python}
#| id: 2-76HqTme18q
#| id: 2-76HqTme18q
#| outputId: cfc05bbb-65b5-47c7-c331-14ea926af8d7
c[2, ...]  #  행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일
```

```{python}
#| id: r0xrjZuHe18q
#| id: r0xrjZuHe18q
#| outputId: 803b9c44-e2d6-4740-e155-457fbeb9503f
c[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일
```

```{python}
#| id: GDamNZlAe18q
#| id: GDamNZlAe18q
#| outputId: ded0f0d4-c509-463a-dfa7-fb701191fc95
c[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일
```

```{python}
#| id: ep_ZLfjge18q
#| id: ep_ZLfjge18q
#| outputId: 876a3bd4-740a-43e8-9848-f68281585e3b
#| scrolled: false
c[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일
```

## 불리언 인덱싱

불리언 값을 가진 `ndarray`를 사용해 축의 인덱스를 지정할 수 있습니다.

```{python}
#| id: jxA7H4L4e18q
#| id: jxA7H4L4e18q
#| outputId: 51067425-5ae4-4a1f-cfa1-3f2aa4218514
b = np.arange(48).reshape(4, 12)
b
```

```{python}
#| id: Eip-K1ape18r
#| id: Eip-K1ape18r
#| outputId: 44596b0f-20d1-4a9a-c37f-602a2d9e2eae
rows_on = np.array([True, False, True, False])
b[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일
```

```{python}
#| id: I4ZgDP1be18r
#| id: I4ZgDP1be18r
#| outputId: de2cb1ae-e888-4161-87c2-6141266e15ba
cols_on = np.array([False, True, False] * 4)
b[:, cols_on]  # 모든 행, 열 1, 4, 7, 10
```

## `np.ix_`

여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 `ix_` 함수를 사용합니다:

```{python}
b[np.ix_((0,2),(1,4,7,10))]
```

```{python}
#| id: yz71pbWRe18r
#| id: yz71pbWRe18r
#| outputId: a53bbc0d-b0df-4584-c5bc-85e587a04b6b
b[np.ix_(rows_on, cols_on)]
```

```{python}
#| id: MwNA7dnwe18r
#| id: MwNA7dnwe18r
#| outputId: c875a197-5121-43b3-e44b-7966be5e2140
np.ix_(rows_on, cols_on)
```

`ndarray`와 같은 크기의 불리언 배열을 사용하면 해당 위치가 `True`인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다:

```{python}
b.shape
```

```{python}
#| id: aZuxVpTme18s
#| id: aZuxVpTme18s
#| outputId: 4ced80b4-0be9-46f6-c328-428270f90cd8
b[b % 3 == 1] # 나머지
```

# 반복

`ndarray`를 반복하는 것은 일반적인 파이썬 배열을 반복한는 것과 매우 유사합니다. 다차원 배열을 반복하면 첫 번째 축에 대해서 수행됩니다.

```{python}
#| id: QjtG4sb8e18s
#| id: QjtG4sb8e18s
#| outputId: 9ee9dd9c-3b24-4a01-9e29-d14e9604a0e9
c = np.arange(24).reshape(2, 3, 4)  # 3D 배열 (두 개의 3x4 행렬로 구성됨)
c
```

```{python}
#| id: DnW3K-U7e18s
#| id: DnW3K-U7e18s
#| outputId: a63639b2-1b15-4f45-9783-5505fac015d4
for m in c:
    print("아이템:")
    print(m)
```

```{python}
#| id: o3M47xuhe18s
#| id: o3M47xuhe18s
#| outputId: 76901c19-1616-405d-aea6-fbcf758f05fd
for i in range(len(c)):  # len(c) == c.shape[0]
    print("아이템:")
    print(c[i]) # c[i,:,:]
```

`ndarray`에 있는 모든 원소를 반복하려면 `flat` 속성을 사용합니다:

```{python}
#| id: kHoBLoLMe18s
#| id: kHoBLoLMe18s
#| outputId: 107d506c-4343-4d71-f2f0-063a127d89b3
for i in c.flat:
    print("아이템:", i)
```

# 배열 쌓기

종종 다른 배열을 쌓아야 할 때가 있습니다. 넘파이는 이를 위해 몇 개의 함수를 제공합니다. 먼저 배열 몇 개를 만들어 보죠.

```{python}
#| id: _wMUy0VKe18t
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 1340, status: ok, timestamp: 1633325750456, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: _wMUy0VKe18t
#| outputId: 2553528f-b921-49f0-afc7-6c6643138897
q1 = np.full((3,4), 1.0)
q1
```

```{python}
#| id: LfwIPIN3e18t
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 18, status: ok, timestamp: 1633325751082, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: LfwIPIN3e18t
#| outputId: 3d999f66-d406-47a4-d4fa-a9cc4acc48ae
q2 = np.full((4,4), 2.0)
q2
```

```{python}
#| id: 6R3OwBrie18t
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 13, status: ok, timestamp: 1633325751084, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: 6R3OwBrie18t
#| outputId: 8378d656-91f1-4ff8-d4f4-bf1007bd49eb
q3 = np.full((3,4), 3.0)
q3
```

## `vstack`

`vstack` 함수를 사용하여 수직으로 쌓아보죠:

```{python}
#| id: DnCmoigke18t
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 692, status: ok, timestamp: 1633325764136, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: DnCmoigke18t
#| outputId: 1f874162-3d05-495e-800c-0a8f2b5ed5ea
q4 = np.vstack((q1, q2, q3))
q4
```

```{python}
#| id: OFRpKbEle18u
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 2, status: ok, timestamp: 1633325765834, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: OFRpKbEle18u
#| outputId: d7612bc4-afbc-4817-a8ca-f99aa99db121
q4.shape
```

q1, q2, q3가 모두 같은 크기이므로 가능합니다(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다).

## `hstack`

`hstack`을 사용해 수평으로도 쌓을 수 있습니다:

```{python}
#| id: JQa34LmHe18u
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 616, status: ok, timestamp: 1633325774053, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: JQa34LmHe18u
#| outputId: 95ecfa89-5a2b-49cc-a539-0af18d51d30b
q5 = np.hstack((q1, q3))
q5
```

```{python}
#| id: 5Uee9Znve18u
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 4, status: ok, timestamp: 1633325774857, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: 5Uee9Znve18u
#| outputId: 7b7de53a-c8d4-4e9e-bfb7-7797a485724a
q5.shape
```

q1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다:

```{python}
#| id: oE8kyqILe18u
#| id: oE8kyqILe18u
#| outputId: de029567-4fe6-4266-e69a-b4eaecb45126
try:
    q5 = np.hstack((q1, q2, q3))
except ValueError as e:
    print(e)
```

## `concatenate`

`concatenate` 함수는 지정한 축으로도 배열을 쌓습니다.

```{python}
#| id: Apns-G9Ue18v
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 521, status: ok, timestamp: 1633325803964, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: Apns-G9Ue18v
#| outputId: 6a52022b-74d7-4aad-f05f-d3c2749d40c9
q7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일
q7
```

```{python}
#| id: 4BfGXHtHe18v
#| colab: {base_uri: 'https://localhost:8080/'}
#| executionInfo: {elapsed: 3, status: ok, timestamp: 1633325806597, user: {displayName: 여지호, photoUrl: 'https://lh3.googleusercontent.com/a/default-user=s64', userId: '14457112622888313085'}, user_tz: -540}
#| id: 4BfGXHtHe18v
#| outputId: 2b73c8a3-d0d7-4d2d-9934-33bd8ee5589f
q7.shape
```

예상했겠지만 `hstack`은 `axis=1`으로 `concatenate`를 호출하는 것과 같습니다.

```{python}
q5 = np.hstack((q1, q3))
q5
```

```{python}
np.concatenate((q1,q3), axis=1)
```

## `stack`

`stack` 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.

```{python}
q1.shape, q3.shape
```

```{python}
#| id: FqRaLFR4e18v
#| id: FqRaLFR4e18v
#| outputId: 3ffea131-aab1-4a15-a889-9a440b84db54
q8 = np.stack((q1, q3))
q8
```

```{python}
#| id: 34-Kd1Zue18v
#| id: 34-Kd1Zue18v
#| outputId: c3b55166-6569-4875-db18-96f05bf9fd26
q8.shape
```

# 배열 분할

분할은 쌓기의 반대입니다. 예를 들어 `vsplit` 함수는 행렬을 수직으로 분할합니다.

먼저 6x4 행렬을 만들어 보죠:

```{python}
#| id: rXqp6ziYe18v
#| id: rXqp6ziYe18v
#| outputId: e01f6c9a-51f0-4a03-e822-236c2a79683b
r = np.arange(24).reshape(6,4)
r
```

수직으로 동일한 크기로 나누어 보겠습니다:

```{python}
#| id: dzDdSqZye18w
#| id: dzDdSqZye18w
#| outputId: 32a80bb3-8baf-45ae-9f61-afd8def1f5d0
r1, r2, r3 = np.vsplit(r, 3)
r1
```

```{python}
#| id: 8w-w_Vepe18w
#| id: 8w-w_Vepe18w
#| outputId: d1d2f8ca-d850-4fc8-a38a-aee35e74a30f
r2
```

```{python}
#| id: Q-sdKxXBe18x
#| id: Q-sdKxXBe18x
#| outputId: 571c8430-69ef-4bb6-fbf2-8450449314e8
r3
```

`split` 함수는 주어진 축을 따라 배열을 분할합니다. `vsplit`는 `axis=0`으로 `split`를 호출하는 것과 같습니다. `hsplit` 함수는 `axis=1`로 `split`를 호출하는 것과 같습니다:

```{python}
#| id: 7TuO7b-He18x
#| id: 7TuO7b-He18x
#| outputId: 848f8013-73a5-4a9a-c892-3e23ef368fb8
r4, r5 = np.hsplit(r, 2)
r4
```

```{python}
#| id: UuZI-P3ce18x
#| id: UuZI-P3ce18x
#| outputId: 4f7a3641-3541-4f4a-89a8-a3682ff3048c
r5
```

# 배열 전치

`transpose` 메서드는 주어진 순서대로 축을 뒤바꾸어 `ndarray` 데이터에 대한 새로운 뷰를 만듭니다.

예를 위해 3D 배열을 만들어 보죠:

```{python}
#| id: uGnmx0nte18x
#| id: uGnmx0nte18x
#| outputId: b0df506f-766b-4ff0-b13a-12d4e616db78
t = np.arange(24).reshape(4,2,3)
t
```

`0, 1, 2`(깊이, 높이, 너비) 축을 `1, 2, 0` (깊이→너비, 높이→깊이, 너비→높이) 순서로 바꾼 `ndarray`를 만들어 보겠습니다:

```{python}
#| id: h8IQrU9ge18x
#| id: h8IQrU9ge18x
#| outputId: 2f2c404d-f84b-46ca-e9cc-8f2d6005970b
t1 = t.transpose((1,2,0))
t1
```

```{python}
#| id: Uhk1ezmme18x
#| id: Uhk1ezmme18x
#| outputId: 81ad764b-67b4-46ea-8dd7-85515824f672
t1.shape
```

`transpose` 기본값은 차원의 순서를 역전시킵니다:

```{python}
#| id: xfqz8Pwre18y
#| id: xfqz8Pwre18y
#| outputId: 2b53e787-346a-45fc-e517-a49a2abc518b
t2 = t.transpose()  # t.transpose((2, 1, 0))와 동일
t2
```

```{python}
#| id: VJN_4ldye18y
#| id: VJN_4ldye18y
#| outputId: 8cced2a2-98eb-44ad-8545-3d867650de89
t2.shape
```

넘파이는 두 축을 바꾸는 `swapaxes` 함수를 제공합니다. 예를 들어 깊이와 높이를 뒤바꾸어 `t`의 새로운 뷰를 만들어 보죠:

```{python}
#| id: 4KXFTH1Ue18y
#| id: 4KXFTH1Ue18y
#| outputId: e7052bb4-1691-4bdd-a871-2757a677f6e7
t3 = t.swapaxes(0,1)  # t.transpose((1, 0, 2))와 동일
t3
```

```{python}
t
```

```{python}
#| id: a27daqefe18y
#| id: a27daqefe18y
#| outputId: 8f8948d3-6644-4ad3-90a8-d16c11335817
t3.shape, t.shape
```

# 선형 대수학

넘파이 2D 배열을 사용하면 파이썬에서 행렬을 효율적으로 표현할 수 있습니다. 주요 행렬 연산을 간단히 둘러 보겠습니다. 선형 대수학, 벡터와 행렬에 관한 자세한 내용은 [Linear Algebra tutorial](math_linear_algebra.ipynb)를 참고하세요.

## 행렬 전치

`T` 속성은 랭크가 2보다 크거나 같을 때 `transpose()`를 호출하는 것과 같습니다:

```{python}
#| id: Mfm70xD_e18y
#| id: Mfm70xD_e18y
#| outputId: a8f842ed-85ac-43c9-fdcf-769b9e7098d0
m1 = np.arange(10).reshape(2,5)
m1
```

```{python}
#| id: n4-oaJHVe18z
#| id: n4-oaJHVe18z
#| outputId: f66a552e-3b73-40cc-a77c-1e5a6b297a6a
m1.T
```

`T` 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다:

```{python}
#| id: 3bogGCzxe18z
#| id: 3bogGCzxe18z
#| outputId: 64eec463-9bf3-4778-ee7d-5b98f802a50d
#| scrolled: true
m2 = np.arange(5)
m2
```

```{python}
#| id: OrANJqIpe18z
#| id: OrANJqIpe18z
#| outputId: f81ab50e-583c-42a7-e907-e68fd05159c4
#| scrolled: true
m2.T
```

먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다:

```{python}
#| id: gqhmd0kve18z
#| id: gqhmd0kve18z
#| outputId: 4f6cb619-2366-49b2-84e2-371c69007731
m2r = m2.reshape(1,5)
m2r
```

```{python}
#| id: swfXpv62e18z
#| id: swfXpv62e18z
#| outputId: 02dc93f2-e082-4223-d0a8-a5bb75011600
m2r.T
```

## 행렬 곱셈

두 개의 행렬을 만들어 `dot` 메서드로 행렬 [곱셈](https://ko.wikipedia.org/wiki/%ED%96%89%EB%A0%AC_%EA%B3%B1%EC%85%88)을 실행해 보죠.

```{python}
#| id: f04nuoY6e180
#| id: f04nuoY6e180
#| outputId: dc0e7eba-b97c-482d-cc9c-39c75340f7ac
n1 = np.arange(10).reshape(2, 5)
n1
```

```{python}
#| id: itq-hJkze180
#| id: itq-hJkze180
#| outputId: a7797da8-a3a2-4182-a046-4f3fdac26002
n2 = np.arange(15).reshape(5,3)
n2
```

```{python}
#| id: zU2DxAlJe180
#| id: zU2DxAlJe180
#| outputId: 46d63a06-6b14-4a33-e077-f614bc3113fe
n1.dot(n2)
```

**주의**: 앞서 언급한 것처럼 `n1*n2`는 행렬 곱셈이 아니라 원소별 곱셈(또는 [아다마르 곱](https://ko.wikipedia.org/wiki/%EC%95%84%EB%8B%A4%EB%A7%88%EB%A5%B4_%EA%B3%B1)이라 부릅니다)입니다.

## 역행렬과 유사 역행렬

`numpy.linalg` 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 `inv` 함수는 정방 행렬의 역행렬을 계산합니다:

```{python}
#| id: cw6aeVP2e180
#| id: cw6aeVP2e180
#| outputId: 17ed696f-2d67-4de0-cd9d-679bcbf86e80
import numpy.linalg as linalg

m3 = np.array([[1,2,3],[5,7,11],[21,29,31]])
m3
```

```{python}
#| id: gozSHiL6e181
#| id: gozSHiL6e181
#| outputId: 3cc8de7e-cd99-4254-ca36-899660222f3e
linalg.inv(m3)
```

`pinv` 함수를 사용하여 [유사 역행렬](https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse)을 계산할 수도 있습니다:

```{python}
#| id: hGwTj0cke181
#| id: hGwTj0cke181
#| outputId: b5e88378-f3c3-4317-9909-022be1c5d0dd
linalg.pinv(m3)
```

## 단위 행렬

행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다(작은 소숫점 오차가 있습니다):

```{python}
#| id: 8q6q3OB0e181
#| id: 8q6q3OB0e181
#| outputId: d6488784-2b7d-462f-9d6f-c68cddb3e94c
m3.dot(linalg.inv(m3))
```

`eye` 함수는 NxN 크기의 단위 행렬을 만듭니다:

```{python}
#| id: SktwewJ9e181
#| id: SktwewJ9e181
#| outputId: 5c85c6b1-9bea-4bb3-c0cc-5eab89b496dd
np.eye(3)
```

## QR 분해

`qr` 함수는 행렬을 [QR 분해](https://en.wikipedia.org/wiki/QR_decomposition)합니다:

```{python}
#| id: u9B-umaze181
#| id: u9B-umaze181
#| outputId: bde2973e-8be9-4a15-f353-71dd0309d53e
q, r = linalg.qr(m3)
q
```

```{python}
#| id: CyuFQfOMe182
#| id: CyuFQfOMe182
#| outputId: 54547e10-7a7f-4720-e9af-d4e020ac0881
r
```

```{python}
#| id: WR02Ldn1e182
#| id: WR02Ldn1e182
#| outputId: ae1f5927-5f79-4094-f71e-03d81b46bb9b
q.dot(r)  # q.r는 m3와 같습니다
```

## 행렬식

`det` 함수는 [행렬식](https://en.wikipedia.org/wiki/Determinant)을 계산합니다:

```{python}
#| id: xeFYRyTJe182
#| id: xeFYRyTJe182
#| outputId: 4fe5038b-cfa9-4fd1-be2e-246900b9b004
linalg.det(m3)  # 행렬식 계산
```

## 고윳값과 고유벡터

`eig` 함수는 정방 행렬의 [고윳값과 고유벡터](https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors)를 계산합니다:

```{python}
#| id: pe7tS7sVe182
#| id: pe7tS7sVe182
#| outputId: 4595af27-d671-48ac-c501-45cd12b86916
eigenvalues, eigenvectors = linalg.eig(m3)
eigenvalues # λ
```

```{python}
#| id: kCnbXmZme182
#| id: kCnbXmZme182
#| outputId: 35ad562b-8b6a-48a0-9c07-eb028852d9d4
eigenvectors # v
```

```{python}
#| id: HtUftah9e182
#| id: HtUftah9e182
#| outputId: 94b626d4-c88d-4f4f-d81f-b573104f7f27
m3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0
```

## 특잇값 분해

`svd` 함수는 행렬을 입력으로 받아 그 행렬의 [특잇값 분해](https://en.wikipedia.org/wiki/Singular_value_decomposition)를 반환합니다:

```{python}
#| id: WlOalB-3e182
#| id: WlOalB-3e182
#| outputId: 7b8a941a-7ac5-4357-eabc-7318517b9ee8
m4 = np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])
m4
```

```{python}
#| id: n6NUhkP6e183
#| id: n6NUhkP6e183
#| outputId: 4f30eef0-f987-44e6-8499-329997206fc9
U, S_diag, V = linalg.svd(m4)
U
```

```{python}
#| id: PikS0qP3e183
#| id: PikS0qP3e183
#| outputId: 3ea8c6c5-224e-4179-ca8d-4ec516984cf0
S_diag
```

`svd` 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다:

```{python}
#| id: K5FGxeWSe183
#| id: K5FGxeWSe183
#| outputId: 2ca18a39-67ab-45b4-aca6-88bdc42e9860
S = np.zeros((4, 5))
S[np.diag_indices(4)] = S_diag
S  # Σ
```

```{python}
#| id: j6tHlysse183
#| id: j6tHlysse183
#| outputId: 724119cd-20ba-48c9-9495-a4647212b688
V
```

```{python}
#| id: eK_qUUaHe183
#| id: eK_qUUaHe183
#| outputId: 0ea1751e-05c5-410c-dd8f-702b53e8da15
U.dot(S).dot(V) # U.Σ.V == m4
```

## 대각원소와 대각합

```{python}
#| id: LTKq5Gnqe184
#| id: LTKq5Gnqe184
#| outputId: 44b5e88c-d3c6-4af2-9a63-289057d9af70
np.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)
```

```{python}
#| id: tieRNOfne184
#| id: tieRNOfne184
#| outputId: 5fec009c-503c-4ddc-8d08-a75dc8392323
np.trace(m3)  # np.diag(m3).sum()와 같습니다
```

## 선형  방정식 풀기

`solve` 함수는 다음과 같은 선형 방정식을 풉니다:

* $2x + 6y = 6$
* $5x + 3y = -9$

```{python}
#| id: ZLT6-qxGe184
#| id: ZLT6-qxGe184
#| outputId: 25c0b5f9-709e-4d73-eecf-5c450ccc6ed3
coeffs  = np.array([[2, 6], [5, 3]])
depvars = np.array([6, -9])
solution = linalg.solve(coeffs, depvars)
solution
```

solution을 확인해 보죠:

```{python}
#| id: lZ0MyYele184
#| id: lZ0MyYele184
#| outputId: 8536d5b6-8147-4329-aa5b-8b938ca2c656
coeffs.dot(solution), depvars  # 네 같네요
```

좋습니다! 다른 방식으로도 solution을 확인해 보죠:

```{python}
#| id: Q90KVIO1e185
#| id: Q90KVIO1e185
#| outputId: 0ce8ee47-80bb-47f5-dafb-90c11ef483d8
#| scrolled: true
np.allclose(coeffs.dot(solution), depvars)
```

# 벡터화

한 번에 하나씩 개별 배열 원소에 대해 연산을 실행하는 대신 배열 연산을 사용하면 훨씬 효율적인 코드를 만들 수 있습니다. 이를 벡터화라고 합니다. 이를 사용하여 넘파이의 최적화된 성능을 활용할 수 있습니다.

예를 들어, $sin(xy/40.5)$ 식을 기반으로 768x1024 크기 배열을 생성하려고 합니다. 중첩 반복문 안에 파이썬의 math 함수를 사용하는 것은 **나쁜** 방법입니다:

```{python}
#| id: Y87wd2Foe185
#| id: Y87wd2Foe185
import math
data = np.empty((768, 1024))
for y in range(768):
    for x in range(1024):
        data[y, x] = math.sin(x*y/40.5)  # 매우 비효율적입니다!
```

작동은 하지만 순수한 파이썬 코드로 반복문이 진행되기 때문에 아주 비효율적입니다. 이 알고리즘을 벡터화해 보죠. 먼저 넘파이 `meshgrid` 함수로 좌표 벡터를 사용해 행렬을 만듭니다.

```{python}
#| id: 4sx7m6q8e185
#| id: 4sx7m6q8e185
#| outputId: 4f29411c-0f4f-414b-8a20-6c8aabebf188
x_coords = np.arange(0, 1024)  # [0, 1, 2, ..., 1023]
y_coords = np.arange(0, 768)   # [0, 1, 2, ..., 767]
X, Y = np.meshgrid(x_coords, y_coords)
X
```

```{python}
#| id: DT263XJ7e185
#| id: DT263XJ7e185
#| outputId: 14470c46-b941-4aba-f823-18f67cd43d04
Y
```

여기서 볼 수 있듯이 `X`와 `Y` 모두 768x1024 배열입니다. `X`에 있는 모든 값은 수평 좌표에 해당합니다. `Y`에 있는 모든 값은 수직 좌표에 해당합니다.

이제 간단히 배열 연산을 사용해 계산할 수 있습니다:

```{python}
#| id: 3Ul0Rm1we185
#| id: 3Ul0Rm1we185
data = np.sin(X*Y/40.5)
```

맷플롯립의 `imshow` 함수를 사용해 이 데이터를 그려보죠([matplotlib tutorial](tools_matplotlib.ipynb)을 참조하세요).

```{python}
#| id: V_6f0Ok3e185
#| id: V_6f0Ok3e185
#| outputId: 49ebca9f-e97f-4cc0-82c1-5ea0f5419257
import matplotlib.pyplot as plt
import matplotlib.cm as cm
fig = plt.figure(1, figsize=(7, 6))
plt.imshow(data, cmap=cm.hot)
plt.show()
```

# 저장과 로딩

넘파이는 `ndarray`를 바이너리 또는 텍스트 포맷으로 손쉽게 저장하고 로드할 수 있습니다.

## 바이너리 `.npy` 포맷

랜덤 배열을 만들고 저장해 보죠.

```{python}
#| id: Is97P60le186
#| id: Is97P60le186
#| outputId: f4af9a53-3eb1-4698-eb47-6b783953557c
#| scrolled: true
a = np.random.rand(2,3)
a
```

```{python}
#| id: opu3vhLce186
#| id: opu3vhLce186
np.save("my_array", a)
```

끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 `.npy`를 붙입니다. 파일 내용을 확인해 보겠습니다:

```{python}
#| id: 0C9U-FXAe186
#| id: 0C9U-FXAe186
#| outputId: fee57006-650a-44d6-df5d-0dea3e772a86
with open("my_array.npy", "rb") as f:
    content = f.read()

content
```

이 파일을 넘파이 배열로 로드하려면 `load` 함수를 사용합니다:

```{python}
#| id: fsrz9PSbe186
#| id: fsrz9PSbe186
#| outputId: 66437fc6-5d10-43cf-a6c5-cf42cbe065ca
a_loaded = np.load("my_array.npy")
a_loaded
```

## 텍스트 포맷

배열을 텍스트 포맷으로 저장해 보죠:

```{python}
#| id: smuuC8MCe186
#| id: smuuC8MCe186
np.savetxt("my_array.csv", a)
```

파일 내용을 확인해 보겠습니다:

```{python}
#| id: YOIiv-0We187
#| id: YOIiv-0We187
#| outputId: ffd121d9-4887-4548-feb0-f52adc4a01ff
with open("my_array.csv", "rt") as f:
    print(f.read())
```

이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다:

```{python}
#| id: juoMnvj6e189
#| id: juoMnvj6e189
np.savetxt("my_array.csv", a, delimiter=",")
```

이 파일을 로드하려면 `loadtxt` 함수를 사용합니다:

```{python}
#| id: qvOpC5pce189
#| id: qvOpC5pce189
#| outputId: 621021f4-c475-4e0b-a4b7-23fbe53b45ce
a_loaded = np.loadtxt("my_array.csv", delimiter=",")
a_loaded
```

## 압축된 `.npz` 포맷

여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다:

```{python}
#| id: AQ-R_KRle189
#| id: AQ-R_KRle189
#| outputId: cc93ffa4-082e-4be7-9298-1cb87c425faf
b = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)
b
```

```{python}
#| id: 04bYxTrse189
#| id: 04bYxTrse189
np.savez("my_arrays", my_a=a, my_b=b)
```

파일 내용을 확인해 보죠. `.npz` 파일 확장자가 자동으로 추가되었습니다.

```{python}
#| id: TeH7X0vqe18-
#| id: TeH7X0vqe18-
#| outputId: 6d2a8c13-f2d7-481e-9df9-0f126301e7e9
with open("my_arrays.npz", "rb") as f:
    content = f.read()

repr(content)[:180] + "[...]"
```

다음과 같이 이 파일을 로드할 수 있습니다:

```{python}
#| id: skFzRE2Ye18-
#| id: skFzRE2Ye18-
#| outputId: 6d9d4538-923d-4db8-e260-1996b6e0eb99
my_arrays = np.load("my_arrays.npz")
my_arrays
```

게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:

```{python}
#| id: tS3-o9Sge18-
#| id: tS3-o9Sge18-
#| outputId: 8ef04620-9fb0-46fa-a93e-0a34fa5ea955
my_arrays.keys()
```

```{python}
#| id: BGhMtxg6e18-
#| id: BGhMtxg6e18-
#| outputId: 33fc035e-6c4d-43e4-e6d2-f71d948d062c
my_arrays["my_a"]
```

# 그 다음은?

넘파이 기본 요소를 모두 배웠지만 훨씬 더 많은 기능이 있습니다. 이를 배우는 가장 좋은 방법은 넘파이를 직접 실습해 보고 훌륭한 [넘파이 문서](http://docs.scipy.org/doc/numpy/reference/index.html)에서 필요한 함수와 기능을 찾아 보세요.

